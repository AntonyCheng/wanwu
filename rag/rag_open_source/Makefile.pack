# 定义变量
PYINSTALLER := pyinstaller
BUILD_DIR := build
DIST_DIR := $(BUILD_DIR)/dist
CONFIG_DIR_LANGCHAIN := $(DIST_DIR)/langchain_rag-master/configs
CONFIG_DIR_ES := $(DIST_DIR)/rag-es-server-unify/config
PYTHON_ENV := rag-new
PYTHON_VERSION := 3.10
PYMILVUS_LANG_YAML := /root/miniconda3/envs/$(PYTHON_ENV)/lib/python$(PYTHON_VERSION)/site-packages/pymilvus/model/sparse/bm25/lang.yaml

# 检查依赖
check_dependencies:
	@START_DEP=$$(date +%s); \
	if ! command -v $(PYINSTALLER) &> /dev/null; then \
	    echo "未找到 pyinstaller，正在安装..."; \
        pip install pyinstaller; \
	fi; \
	pip install pymilvus; \
	pip install pymilvus.model; \
	END_DEP=$$(date +%s); \
	echo "依赖安装耗时: $$((END_DEP - START_DEP)) 秒"

# 创建日志目录
create_logs_dir:
	@mkdir -p logs

# 移除已打包目录
remove_build_dir:
	@rm -rf $(BUILD_DIR)

# 复制配置文件
copy_config_files:
	@START_CONFIG=$$(date +%s); \
	mkdir -p $(CONFIG_DIR_LANGCHAIN); \
	mkdir -p $(CONFIG_DIR_ES); \
	cp -r ./langchain_rag-master/configs/config.ini $(CONFIG_DIR_LANGCHAIN)/; \
	cp -r ./rag-es-server-unify/config/config.ini $(CONFIG_DIR_ES)/; \
	END_CONFIG=$$(date +%s); \
	echo "配置文件复制耗时: $$((END_CONFIG - START_CONFIG)) 秒"

# 打包 run_app
pack_run_app:
	@echo "正在打包run应用..."
	@START_RUN=$$(date +%s); \
	$(PYINSTALLER) --name run_app \
	        --distpath=$(DIST_DIR)/langchain_rag-master \
	        --onefile \
	        --add-data "./langchain_rag-master/configs:configs" \
	        --add-data "$(PYMILVUS_LANG_YAML):pymilvus/model/sparse/bm25" \
	        --hidden-import="gunicorn" \
	        --hidden-import="gunicorn.glogging" \
	        --hidden-import="gunicorn.app" \
	        --hidden-import="gunicorn.app.base" \
	        --hidden-import="gunicorn.app.wsgiapp" \
	        --hidden-import="gunicorn.config" \
	        --hidden-import="gunicorn.workers" \
	        --hidden-import="gunicorn.workers.sync" \
	        --hidden-import="gunicorn.workers.ggevent" \
	        --hidden-import="gunicorn.workers.gthread" \
	        --hidden-import="gunicorn.workers.sync" \
	        --hidden-import="gunicorn.workers.geventlet" \
	        --hidden-import="pymilvus" \
	        --hidden-import="pymilvus.model" \
	        --hidden-import "pymilvus.model.sparse.bm25.tokenizers" \
	        --hidden-import="langchain_community" \
	        --hidden-import="langchain_community.document_loaders" \
	        --hidden-import="langchain_community.document_loaders.text" \
	        --hidden-import="langchain_community.document_loaders.unstructured" \
	        --hidden-import="langchain_community.document_loaders.csv_loader" \
	        --hidden-import="tiktoken_ext.openai_public" \
	        --hidden-import="tiktoken_ext" \
	        ./langchain_rag-master/run_entrypoint.py; \
	if [ $$? -eq 0 ]; then \
	    END_RUN=$$(date +%s); \
	    echo "run_app打包成功！耗时: $$((END_RUN - START_RUN)) 秒"; \
	    echo "可执行文件位于 $(DIST_DIR)/langchain_rag-master"; \
	else \
	    echo "run_app 打包失败，请检查错误信息"; \
	    exit 1; \
	fi

# 打包 run_sse_app
pack_sse_app:
	@echo "正在打包run_sse_app应用..."
	@START_SSE=$$(date +%s); \
	$(PYINSTALLER) --name sse_app \
	                --distpath=$(DIST_DIR)/langchain_rag-master \
	                --onefile \
	                --add-data "./langchain_rag-master/configs:configs" \
	                --add-data "$(PYMILVUS_LANG_YAML):pymilvus/model/sparse/bm25" \
	                --hidden-import="uvicorn.logging" \
	                --hidden-import="uvicorn.loops" \
	                --hidden-import="uvicorn.loops.auto" \
	                --hidden-import="uvicorn.protocols" \
	                --hidden-import="uvicorn.protocols.http" \
	                --hidden-import="uvicorn.protocols.http.auto" \
	                --hidden-import="uvicorn.protocols.websockets" \
	                --hidden-import="uvicorn.protocols.websockets.auto" \
	                --hidden-import="uvicorn.lifespan" \
	                --hidden-import="uvicorn.lifespan.on" \
	                --hidden-import="pymilvus" \
	                --hidden-import="pymilvus.model" \
	                --hidden-import "pymilvus.model.sparse.bm25.tokenizers" \
	                ./langchain_rag-master/sse_entrypoint.py; \
	if [ $$? -eq 0 ]; then \
	    END_SSE=$$(date +%s); \
	    echo "run_sse_app打包成功！耗时: $$((END_SSE - START_SSE)) 秒"; \
	    echo "可执行文件位于$(DIST_DIR)/langchain_rag-master"; \
	else \
	    echo "run_sse_app打包失败，请检查错误信息"; \
	    exit 1; \
	fi

# 打包 async_doc_status_init
pack_async_doc_status_init:
	@echo "正在打包初始化脚本 asyn_doc_status_init..."
	@START_INIT=$$(date +%s); \
	$(PYINSTALLER) --name asyn_doc_status_init \
	                --distpath=$(DIST_DIR)/langchain_rag-master \
	                --onefile \
	                --add-data "./langchain_rag-master/configs/config.ini:configs" \
	                ./langchain_rag-master/asyn_doc_status_init.py; \
	if [ $$? -eq 0 ]; then \
	    END_INIT=$$(date +%s); \
	    echo "async_doc_status_init打包成功！耗时: $$((END_INIT - START_INIT)) 秒"; \
	    echo "可执行文件位于 $(DIST_DIR)/langchain_rag-master 目录"; \
	else \
	    echo "async_doc_status_init打包失败，请检查错误信息"; \
	    exit 1; \
	fi

# 打包 async_add_file
pack_async_add_file:
	@echo "正在打包主应用 asyn_add_file..."
	@START_ADD=$$(date +%s); \
	$(PYINSTALLER) --name asyn_add_file \
	                --distpath=$(DIST_DIR)/langchain_rag-master \
	                --onefile \
	                --add-data "./langchain_rag-master/configs/config.ini:configs" \
	                --add-data "./langchain_rag-master/utils:utils" \
	                --add-data "./langchain_rag-master/logging_config.py:." \
	                --add-data "$(PYMILVUS_LANG_YAML):pymilvus/model/sparse/bm25" \
	                --hidden-import="nltk" \
	                --hidden-import="utils.milvus_utils" \
	                --hidden-import="utils.minio_utils" \
	                --hidden-import="utils.es_utils" \
	                --hidden-import="utils.file_utils" \
	                --hidden-import="utils.mq_rel_utils" \
	                --hidden-import="utils.knowledge_base_utils" \
	                --hidden-import="pymilvus" \
	                --hidden-import="pymilvus.model" \
	                --hidden-import "pymilvus.model.sparse.bm25.tokenizers" \
	                --hidden-import="langchain_community" \
	                --hidden-import="langchain_community.document_loaders" \
	                --hidden-import="langchain_community.document_loaders.text" \
	                --hidden-import="langchain_community.document_loaders.unstructured" \
	                --hidden-import="langchain_community.document_loaders.csv_loader" \
	                --hidden-import="tiktoken_ext.openai_public" \
	                --hidden-import="tiktoken_ext" \
	                ./langchain_rag-master/asyn_add_file.py; \
	if [ $$? -eq 0 ]; then \
	    END_ADD=$$(date +%s); \
	    echo "async_add_file打包成功！耗时: $$((END_ADD - START_ADD)) 秒"; \
	    echo "可执行文件位于 $(DIST_DIR)/langchain_rag-master 目录"; \
	else \
	    echo "async_add_file打包失败，请检查错误信息"; \
	    exit 1; \
	fi

# 打包 guarding
pack_guarding:
	@echo "正在打包guarding守护进程监控工具..."
	@START_GUARD=$$(date +%s); \
	$(PYINSTALLER) --name guarding_asyn_add_app \
	                --distpath=$(DIST_DIR)/langchain_rag-master \
	                --add-data "./langchain_rag-master/asyn_add_file.sh:." \
	                --onefile \
	                ./langchain_rag-master/guarding_file_asyn_add_process.py; \
	if [ $$? -eq 0 ]; then \
	    END_GUARD=$$(date +%s); \
	    echo "guarding打包成功！耗时: $$((END_GUARD - START_GUARD)) 秒"; \
	    echo "可执行文件位于 $(DIST_DIR)/langchain_rag-master 目录"; \
	else \
	    echo "guarding打包失败，请检查错误信息"; \
	    exit 1; \
	fi

# 打包 url single
pack_url_single:
	@echo "正在打包url single应用..."
	@START_URL=$$(date +%s); \
	$(PYINSTALLER) --name url_single_app \
	                --distpath=$(DIST_DIR)/langchain_rag-master/url_parser \
	                --onefile \
	                --add-data "./langchain_rag-master/configs:configs" \
	                --hidden-import="gunicorn" \
	                --hidden-import="gunicorn.glogging" \
	                --hidden-import="gunicorn.app" \
	                --hidden-import="gunicorn.app.base" \
	                --hidden-import="gunicorn.app.wsgiapp" \
	                --hidden-import="gunicorn.config" \
	                --hidden-import="gunicorn.workers" \
	                --hidden-import="gunicorn.workers.sync" \
	                --hidden-import="gunicorn.workers.ggevent" \
	                --hidden-import="gunicorn.workers.gthread" \
	                --hidden-import="gunicorn.workers.sync" \
	                --hidden-import="gunicorn.workers.geventlet" \
	                ./langchain_rag-master/url_entrypoint.py; \
	if [ $$? -eq 0 ]; then \
	    END_URL=$$(date +%s); \
	    echo "url single打包成功！耗时: $$((END_URL - START_URL)) 秒"; \
	    echo "可执行文件位于 $(DIST_DIR)/langchain_rag-master/url_parser"; \
	else \
	    echo "url single打包失败，请检查错误信息"; \
	    exit 1; \
	fi

# 打包 minio
pack_minio:
	@echo "正在打包minio应用..."
	@START_MINIO=$$(date +%s); \
	$(PYINSTALLER) --name minio_app \
	                --distpath=$(DIST_DIR)/minio_project \
	                --onefile \
	                --hidden-import="gunicorn" \
	                --hidden-import="gunicorn.glogging" \
	                --hidden-import="gunicorn.app" \
	                --hidden-import="gunicorn.app.base" \
	                --hidden-import="gunicorn.app.wsgiapp" \
	                --hidden-import="gunicorn.config" \
	                --hidden-import="gunicorn.workers" \
	                --hidden-import="gunicorn.workers.sync" \
	                --hidden-import="gunicorn.workers.ggevent" \
	                --hidden-import="gunicorn.workers.gthread" \
	                --hidden-import="gunicorn.workers.sync" \
	                --hidden-import="gunicorn.workers.geventlet" \
	                ./minio_project/minio_entrypoint.py; \
	if [ $$? -eq 0 ]; then \
	    END_MINIO=$$(date +%s); \
	    echo "minio 打包成功！耗时: $$((END_MINIO - START_MINIO)) 秒"; \
	    echo "可执行文件位于 $(DIST_DIR)/minio_project"; \
	else \
	    echo "打包失败，请检查错误信息"; \
	    exit 1; \
	fi

# 打包 es
pack_es:
	@echo "正在打包es应用..."
	@START_ES=$$(date +%s); \
	$(PYINSTALLER) --name es_app \
	                --onefile \
	                --distpath=$(DIST_DIR)/rag-es-server-unify \
	                --add-data "./rag-es-server-unify/config/config.ini:config" \
	                --hidden-import="gunicorn" \
	                --hidden-import="gunicorn.glogging" \
	                --hidden-import="gunicorn.app" \
	                --hidden-import="gunicorn.app.base" \
	                --hidden-import="gunicorn.app.wsgiapp" \
	                --hidden-import="gunicorn.config" \
	                --hidden-import="gunicorn.workers" \
	                --hidden-import="gunicorn.workers.sync" \
	                --hidden-import="gunicorn.workers.ggevent" \
	                --hidden-import="gunicorn.workers.gthread" \
	                --hidden-import="gunicorn.workers.sync" \
	                --hidden-import="gunicorn.workers.geventlet" \
	                ./rag-es-server-unify/es_entrypoint.py; \
	if [ $$? -eq 0 ]; then \
	    END_ES=$$(date +%s); \
	    echo "es打包成功！耗时: $$((END_ES - START_ES)) 秒"; \
	    echo "可执行文件位于 $(DIST_DIR)/rag-es-server-unify"; \
	else \
	    echo "es打包失败，请检查错误信息"; \
	    exit 1; \
	fi

# 主目标
pack_all: check_dependencies create_logs_dir remove_build_dir copy_config_files pack_run_app pack_sse_app pack_async_doc_status_init pack_async_add_file pack_guarding pack_url_single pack_minio pack_es
    @TOTAL_START=$$(date +%s); \
	echo "=============================================="; \
	echo "所有打包任务完成！"; \
	TOTAL_END=$$(date +%s); \  # 移到此处计算结束时间
	TOTAL_TIME=$$((TOTAL_END - TOTAL_START)); \
	echo "总耗时: $$TOTAL_TIME 秒"; \
	echo "=============================================="

.PHONY: pack_all check_dependencies create_logs_dir remove_build_dir copy_config_files pack_run_app pack_sse_app pack_async_doc_status_init pack_async_add_file pack_guarding pack_url_single pack_minio pack_es