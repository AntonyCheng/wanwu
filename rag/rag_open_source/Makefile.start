# 定义端口变量
RUN_PORT = 8681
SSE_PORT = 10891
URL_PORT = 8613
MINIO_PORT = 15000
ES_PORT = 20041

# 自定义递归调用命令
MAKE_CMD = $(MAKE) -f Makefile.start

# 启动所有应用
start_all:
	$(MAKE_CMD) stop_all
	sleep 3
	$(MAKE_CMD) start_run_app
	sleep 3
	$(MAKE_CMD) start_sse_app
	sleep 3
	$(MAKE_CMD) start_asyn_doc_status_init
	sleep 3
	$(MAKE_CMD) start_async_add_file
	sleep 3
	$(MAKE_CMD) start_guarding
	sleep 3
	$(MAKE_CMD) start_url_single
	sleep 3
	$(MAKE_CMD) start_minio
	sleep 3
	$(MAKE_CMD) start_es_server

# 停止所有进程
stop_all: stop_es_server stop_minio stop_url_single stop_guarding stop_async_add_file stop_sse_app stop_run_app

# 启动 run_app
start_run_app:
	@echo "正在启动run应用..."
	@echo "正在启动FlaskAPI应用，端口号为$(RUN_PORT)..."
	@cd ./build/dist/rag_core/ && { \
	    LOG_FILE=$(RUN_BASE_LOG_FILE)$(RUN_PORT) nohup ./run_app --port $(RUN_PORT) --workers $(RUN_NUM_WORKERS) --timeout $(RUN_TIMEOUT) >>$(RUN_START_LOG_FILE) 2>&1 & \
	    if [ $$? -eq 0 ]; then \
	        echo "应用启动成功，日志文件为./build/dist/rag_core/logs/$(RUN_BASE_LOG_FILE)$(RUN_PORT).log。"; \
	    else \
	        echo "应用启动失败"; \
	        exit 1; \
	    fi; \
	} || { \
	    echo "无法切换到指定目录"; \
	    exit 1; \
	}; \
	cd ../../../;

# 启动 sse_app
start_sse_app:
	@echo "正在启动sse应用..."
	@echo "正在启动FastAPI应用，端口号为$(SSE_PORT)..."
	@LOG_FILE=$(SSE_BASE_LOG_FILE)$(SSE_PORT) nohup ./build/dist/rag_core/sse_app --workers 5 --port $(SSE_PORT) --timeout 300 >>$(SSE_START_LOG_FILE) 2>&1 &
	echo "应用启动成功，日志文件为./logs/$(SSE_BASE_LOG_FILE)$(SSE_PORT).log。";

# 启动 asyn_doc_status_init
start_asyn_doc_status_init:
	@nohup ./build/dist/rag_core/asyn_doc_status_init > logs/init_asyn.out 2>&1
	@sleep 1

# 启动 async_add_file
start_async_add_file:
	@for ADDID in $$(seq -f "%03g" 1 2); do \
	    LOG_FILE=$$(echo "$(ASYNC_ADD_FILE_BASE_LOG_FILE)$$ADDID") \
	    nohup ./build/dist/rag_core/asyn_add_file >>$$LOG_FILE 2>&1 & \
	    echo "应用启动成功，日志文件为$$LOG_FILE"; \
	done

# 启动 guarding
start_guarding:
	@nohup ./build/dist/rag_core/guarding_asyn_add_app > logs/guarding_asyn_add_process.out 2>&1 &
	@echo "守护异步解析进程监控已启动"

# 启动 url single
start_url_single:
	@echo "正在启动url single应用..."
	@echo "正在启动url single应用，端口号为$(URL_PORT)..."
	@LOG_FILE=$(URL_SINGLE_BASE_LOG_FILE)$(URL_PORT) nohup ./build/dist/rag_core/url_parser/url_single_app --port $(URL_PORT) >>$(URL_SINGLE_START_LOG_FILE) 2>&1 &
	echo "应用url single启动成功，日志文件为./logs/$(URL_SINGLE_BASE_LOG_FILE)$(URL_PORT).log。";

# 启动 minio
start_minio:
	@echo "正在启动minio FlaskAPI应用..."
	@echo "正在启动minio FlaskAPI应用，端口号为$(MINIO_PORT)..."
	@LOG_FILE=$(MINIO_BASE_LOG_FILE)$(MINIO_PORT) nohup ./build/dist/minio_project/minio_app --port $(MINIO_PORT) >>$(MINIO_START_LOG_FILE) 2>&1 &
	echo "应用启动成功，日志文件为./logs/$(MINIO_BASE_LOG_FILE)$(MINIO_PORT).log。";

# 启动 es_server
start_es_server:
	@echo "启动 es_rag_server 程序..."
	@echo "启动 es_rag_server 程序...到$(ES_PORT)端口"
	@cd ./build/dist/rag_es_server_unify/ && \
	nohup ./es_app --port $(ES_PORT) --workers $(ES_NUM_WORKERS) >>$(ES_START_LOG_FILE) 2>&1 &
	if [ $$? -eq 0 ]; then \
	    echo "应用启动成功，日志文件为./logs/es_logs_$(ES_PORT).log。"; \
	else \
	    echo "应用启动失败，请检查日志文件。"; \
	    exit 1; \
	fi; \
	cd ../../../;

# 停止 minio
stop_minio:
	@ps -ef | grep $(MINIO_PORT) | grep -v grep | awk '{print $$2}' | xargs kill -9 || true

# 停止 guarding
stop_guarding:
	@ps -ef | grep '[g]uarding_asyn_add_app' | grep -v grep | awk '{print $$2}' | xargs kill -9 || true

# 停止 async_add_file
stop_async_add_file:
	@ps -ef | grep '[a]syn_add_file' | grep -v grep | awk '{print $$2}' | xargs kill -9 || true

# 停止 sse_app
stop_sse_app:
	@ps -ef | grep $(SSE_PORT) | grep -v grep | awk '{print $$2}' | xargs kill -9 || true

# 停止 run_app
stop_run_app:
	@ps -ef | grep $(RUN_PORT) | grep -v grep | awk '{print $$2}' | xargs kill -9 || true

# 停止 es server
stop_es_server:
	@ps -ef | grep $(ES_PORT) | grep -v grep | awk '{print $$2}' | xargs kill -9 || true

# 停止 url single
stop_url_single:
	@ps -ef | grep $(URL_PORT) | grep -v grep | awk '{print $$2}' | xargs kill -9 || true

# 默认目标
all: start_all

# 定义日志文件名称
RUN_BASE_LOG_FILE="run_logs_"
RUN_START_LOG_FILE="run_console.log"
RUN_NUM_WORKERS=5
RUN_TIMEOUT=600
SSE_BASE_LOG_FILE="kb_sse_"
SSE_START_LOG_FILE="kb_sse_console.log"
URL_SINGLE_BASE_LOG_FILE="url_single_logs_"
URL_SINGLE_START_LOG_FILE="url_single_console.log"
MINIO_BASE_LOG_FILE="minio_logs_"
MINIO_START_LOG_FILE="minio_console.log"
ES_BASE_LOG_FILE="es_logs_"
ES_START_LOG_FILE="es_console.log"
ES_NUM_WORKERS=5
ASYNC_ADD_FILE_BASE_LOG_FILE="asyn_add_"
ASYNC_ADD_FILE_START_LOG_FILE="kb_sse_console.log"

# 声明所有目标为伪目标（必须添加）
.PHONY: all start_all stop_all \
        start_run_app start_sse_app start_asyn_doc_status_init \
        start_async_add_file start_guarding start_url_single \
        start_minio start_es_server stop_minio stop_guarding \
        stop_async_add_file stop_sse_app stop_run_app \
        stop_es_server stop_url_single