// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/knowledgebase-keywords-service/knowledgebase-keywords-service.proto

package knowledgebase_keywords_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KnowledgeBaseKeywordsService_GetKnowledgeKeywordsList_FullMethodName   = "/knowledgebase_keywords_service.KnowledgeBaseKeywordsService/GetKnowledgeKeywordsList"
	KnowledgeBaseKeywordsService_GetKnowledgeKeywordsDetail_FullMethodName = "/knowledgebase_keywords_service.KnowledgeBaseKeywordsService/GetKnowledgeKeywordsDetail"
	KnowledgeBaseKeywordsService_CreateKnowledgeKeywords_FullMethodName    = "/knowledgebase_keywords_service.KnowledgeBaseKeywordsService/CreateKnowledgeKeywords"
	KnowledgeBaseKeywordsService_UpdateKnowledgeKeywords_FullMethodName    = "/knowledgebase_keywords_service.KnowledgeBaseKeywordsService/UpdateKnowledgeKeywords"
	KnowledgeBaseKeywordsService_DeleteKnowledgeKeywords_FullMethodName    = "/knowledgebase_keywords_service.KnowledgeBaseKeywordsService/DeleteKnowledgeKeywords"
)

// KnowledgeBaseKeywordsServiceClient is the client API for KnowledgeBaseKeywordsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnowledgeBaseKeywordsServiceClient interface {
	// 查询知识库关键词列表
	GetKnowledgeKeywordsList(ctx context.Context, in *GetKnowledgeKeywordsListReq, opts ...grpc.CallOption) (*GetKnowledgeKeywordsListResp, error)
	// 查询知识库关键词详情
	GetKnowledgeKeywordsDetail(ctx context.Context, in *GetKnowledgeKeywordsDetailReq, opts ...grpc.CallOption) (*GetKnowledgeKeywordsDetailResp, error)
	// 新增知识库关键词
	CreateKnowledgeKeywords(ctx context.Context, in *CreateKnowledgeKeywordsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 编辑知识库关键词
	UpdateKnowledgeKeywords(ctx context.Context, in *UpdateKnowledgeKeywordsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除知识库关键词
	DeleteKnowledgeKeywords(ctx context.Context, in *DeleteKnowledgeKeywordsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type knowledgeBaseKeywordsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeBaseKeywordsServiceClient(cc grpc.ClientConnInterface) KnowledgeBaseKeywordsServiceClient {
	return &knowledgeBaseKeywordsServiceClient{cc}
}

func (c *knowledgeBaseKeywordsServiceClient) GetKnowledgeKeywordsList(ctx context.Context, in *GetKnowledgeKeywordsListReq, opts ...grpc.CallOption) (*GetKnowledgeKeywordsListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKnowledgeKeywordsListResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseKeywordsService_GetKnowledgeKeywordsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseKeywordsServiceClient) GetKnowledgeKeywordsDetail(ctx context.Context, in *GetKnowledgeKeywordsDetailReq, opts ...grpc.CallOption) (*GetKnowledgeKeywordsDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKnowledgeKeywordsDetailResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseKeywordsService_GetKnowledgeKeywordsDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseKeywordsServiceClient) CreateKnowledgeKeywords(ctx context.Context, in *CreateKnowledgeKeywordsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseKeywordsService_CreateKnowledgeKeywords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseKeywordsServiceClient) UpdateKnowledgeKeywords(ctx context.Context, in *UpdateKnowledgeKeywordsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseKeywordsService_UpdateKnowledgeKeywords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseKeywordsServiceClient) DeleteKnowledgeKeywords(ctx context.Context, in *DeleteKnowledgeKeywordsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseKeywordsService_DeleteKnowledgeKeywords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeBaseKeywordsServiceServer is the server API for KnowledgeBaseKeywordsService service.
// All implementations must embed UnimplementedKnowledgeBaseKeywordsServiceServer
// for forward compatibility.
type KnowledgeBaseKeywordsServiceServer interface {
	// 查询知识库关键词列表
	GetKnowledgeKeywordsList(context.Context, *GetKnowledgeKeywordsListReq) (*GetKnowledgeKeywordsListResp, error)
	// 查询知识库关键词详情
	GetKnowledgeKeywordsDetail(context.Context, *GetKnowledgeKeywordsDetailReq) (*GetKnowledgeKeywordsDetailResp, error)
	// 新增知识库关键词
	CreateKnowledgeKeywords(context.Context, *CreateKnowledgeKeywordsReq) (*emptypb.Empty, error)
	// 编辑知识库关键词
	UpdateKnowledgeKeywords(context.Context, *UpdateKnowledgeKeywordsReq) (*emptypb.Empty, error)
	// 删除知识库关键词
	DeleteKnowledgeKeywords(context.Context, *DeleteKnowledgeKeywordsReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedKnowledgeBaseKeywordsServiceServer()
}

// UnimplementedKnowledgeBaseKeywordsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKnowledgeBaseKeywordsServiceServer struct{}

func (UnimplementedKnowledgeBaseKeywordsServiceServer) GetKnowledgeKeywordsList(context.Context, *GetKnowledgeKeywordsListReq) (*GetKnowledgeKeywordsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledgeKeywordsList not implemented")
}
func (UnimplementedKnowledgeBaseKeywordsServiceServer) GetKnowledgeKeywordsDetail(context.Context, *GetKnowledgeKeywordsDetailReq) (*GetKnowledgeKeywordsDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledgeKeywordsDetail not implemented")
}
func (UnimplementedKnowledgeBaseKeywordsServiceServer) CreateKnowledgeKeywords(context.Context, *CreateKnowledgeKeywordsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgeKeywords not implemented")
}
func (UnimplementedKnowledgeBaseKeywordsServiceServer) UpdateKnowledgeKeywords(context.Context, *UpdateKnowledgeKeywordsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledgeKeywords not implemented")
}
func (UnimplementedKnowledgeBaseKeywordsServiceServer) DeleteKnowledgeKeywords(context.Context, *DeleteKnowledgeKeywordsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKnowledgeKeywords not implemented")
}
func (UnimplementedKnowledgeBaseKeywordsServiceServer) mustEmbedUnimplementedKnowledgeBaseKeywordsServiceServer() {
}
func (UnimplementedKnowledgeBaseKeywordsServiceServer) testEmbeddedByValue() {}

// UnsafeKnowledgeBaseKeywordsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnowledgeBaseKeywordsServiceServer will
// result in compilation errors.
type UnsafeKnowledgeBaseKeywordsServiceServer interface {
	mustEmbedUnimplementedKnowledgeBaseKeywordsServiceServer()
}

func RegisterKnowledgeBaseKeywordsServiceServer(s grpc.ServiceRegistrar, srv KnowledgeBaseKeywordsServiceServer) {
	// If the following call pancis, it indicates UnimplementedKnowledgeBaseKeywordsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KnowledgeBaseKeywordsService_ServiceDesc, srv)
}

func _KnowledgeBaseKeywordsService_GetKnowledgeKeywordsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnowledgeKeywordsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseKeywordsServiceServer).GetKnowledgeKeywordsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseKeywordsService_GetKnowledgeKeywordsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseKeywordsServiceServer).GetKnowledgeKeywordsList(ctx, req.(*GetKnowledgeKeywordsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseKeywordsService_GetKnowledgeKeywordsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnowledgeKeywordsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseKeywordsServiceServer).GetKnowledgeKeywordsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseKeywordsService_GetKnowledgeKeywordsDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseKeywordsServiceServer).GetKnowledgeKeywordsDetail(ctx, req.(*GetKnowledgeKeywordsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseKeywordsService_CreateKnowledgeKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgeKeywordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseKeywordsServiceServer).CreateKnowledgeKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseKeywordsService_CreateKnowledgeKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseKeywordsServiceServer).CreateKnowledgeKeywords(ctx, req.(*CreateKnowledgeKeywordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseKeywordsService_UpdateKnowledgeKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKnowledgeKeywordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseKeywordsServiceServer).UpdateKnowledgeKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseKeywordsService_UpdateKnowledgeKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseKeywordsServiceServer).UpdateKnowledgeKeywords(ctx, req.(*UpdateKnowledgeKeywordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseKeywordsService_DeleteKnowledgeKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKnowledgeKeywordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseKeywordsServiceServer).DeleteKnowledgeKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseKeywordsService_DeleteKnowledgeKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseKeywordsServiceServer).DeleteKnowledgeKeywords(ctx, req.(*DeleteKnowledgeKeywordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// KnowledgeBaseKeywordsService_ServiceDesc is the grpc.ServiceDesc for KnowledgeBaseKeywordsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KnowledgeBaseKeywordsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knowledgebase_keywords_service.KnowledgeBaseKeywordsService",
	HandlerType: (*KnowledgeBaseKeywordsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKnowledgeKeywordsList",
			Handler:    _KnowledgeBaseKeywordsService_GetKnowledgeKeywordsList_Handler,
		},
		{
			MethodName: "GetKnowledgeKeywordsDetail",
			Handler:    _KnowledgeBaseKeywordsService_GetKnowledgeKeywordsDetail_Handler,
		},
		{
			MethodName: "CreateKnowledgeKeywords",
			Handler:    _KnowledgeBaseKeywordsService_CreateKnowledgeKeywords_Handler,
		},
		{
			MethodName: "UpdateKnowledgeKeywords",
			Handler:    _KnowledgeBaseKeywordsService_UpdateKnowledgeKeywords_Handler,
		},
		{
			MethodName: "DeleteKnowledgeKeywords",
			Handler:    _KnowledgeBaseKeywordsService_DeleteKnowledgeKeywords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/knowledgebase-keywords-service/knowledgebase-keywords-service.proto",
}
