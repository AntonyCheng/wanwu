// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/app-service/app-service.proto

package app_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppService_GenApiKey_FullMethodName                    = "/app_service.AppService/GenApiKey"
	AppService_GetApiKeyList_FullMethodName                = "/app_service.AppService/GetApiKeyList"
	AppService_DelApiKey_FullMethodName                    = "/app_service.AppService/DelApiKey"
	AppService_GetApiKeyByKey_FullMethodName               = "/app_service.AppService/GetApiKeyByKey"
	AppService_GetExplorationAppList_FullMethodName        = "/app_service.AppService/GetExplorationAppList"
	AppService_ChangeExplorationAppFavorite_FullMethodName = "/app_service.AppService/ChangeExplorationAppFavorite"
	AppService_RecordAppHistory_FullMethodName             = "/app_service.AppService/RecordAppHistory"
	AppService_PublishApp_FullMethodName                   = "/app_service.AppService/PublishApp"
	AppService_UnPublishApp_FullMethodName                 = "/app_service.AppService/UnPublishApp"
	AppService_GetAppList_FullMethodName                   = "/app_service.AppService/GetAppList"
	AppService_GetAppListByIds_FullMethodName              = "/app_service.AppService/GetAppListByIds"
	AppService_DeleteApp_FullMethodName                    = "/app_service.AppService/DeleteApp"
	AppService_AppUrlCreate_FullMethodName                 = "/app_service.AppService/AppUrlCreate"
	AppService_AppUrlDelete_FullMethodName                 = "/app_service.AppService/AppUrlDelete"
	AppService_AppUrlUpdate_FullMethodName                 = "/app_service.AppService/AppUrlUpdate"
	AppService_GetAppUrlList_FullMethodName                = "/app_service.AppService/GetAppUrlList"
	AppService_GetAppUrlInfoBySuffix_FullMethodName        = "/app_service.AppService/GetAppUrlInfoBySuffix"
	AppService_AppUrlStatusSwitch_FullMethodName           = "/app_service.AppService/AppUrlStatusSwitch"
)

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	// --- apiKey ---
	GenApiKey(ctx context.Context, in *GenApiKeyReq, opts ...grpc.CallOption) (*ApiKeyInfo, error)
	GetApiKeyList(ctx context.Context, in *GetApiKeyListReq, opts ...grpc.CallOption) (*ApiKeyInfoList, error)
	DelApiKey(ctx context.Context, in *DelApiKeyReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetApiKeyByKey(ctx context.Context, in *GetApiKeyByKeyReq, opts ...grpc.CallOption) (*ApiKeyInfo, error)
	// --- exploration ---
	GetExplorationAppList(ctx context.Context, in *GetExplorationAppListReq, opts ...grpc.CallOption) (*ExplorationAppList, error)
	ChangeExplorationAppFavorite(ctx context.Context, in *ChangeExplorationAppFavoriteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RecordAppHistory(ctx context.Context, in *RecordAppHistoryReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// --- app ---
	PublishApp(ctx context.Context, in *PublishAppReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnPublishApp(ctx context.Context, in *UnPublishAppReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAppList(ctx context.Context, in *GetAppListReq, opts ...grpc.CallOption) (*AppList, error)
	GetAppListByIds(ctx context.Context, in *GetAppListByIdsReq, opts ...grpc.CallOption) (*AppList, error)
	DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// --- url ---
	AppUrlCreate(ctx context.Context, in *AppUrlCreateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AppUrlDelete(ctx context.Context, in *AppUrlDeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AppUrlUpdate(ctx context.Context, in *AppUrlUpdateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAppUrlList(ctx context.Context, in *GetAppUrlListReq, opts ...grpc.CallOption) (*GetAppUrlListResp, error)
	GetAppUrlInfoBySuffix(ctx context.Context, in *GetAppUrlInfoBySuffixReq, opts ...grpc.CallOption) (*AppUrlInfo, error)
	AppUrlStatusSwitch(ctx context.Context, in *AppUrlStatusSwitchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) GenApiKey(ctx context.Context, in *GenApiKeyReq, opts ...grpc.CallOption) (*ApiKeyInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiKeyInfo)
	err := c.cc.Invoke(ctx, AppService_GenApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetApiKeyList(ctx context.Context, in *GetApiKeyListReq, opts ...grpc.CallOption) (*ApiKeyInfoList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiKeyInfoList)
	err := c.cc.Invoke(ctx, AppService_GetApiKeyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DelApiKey(ctx context.Context, in *DelApiKeyReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppService_DelApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetApiKeyByKey(ctx context.Context, in *GetApiKeyByKeyReq, opts ...grpc.CallOption) (*ApiKeyInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiKeyInfo)
	err := c.cc.Invoke(ctx, AppService_GetApiKeyByKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetExplorationAppList(ctx context.Context, in *GetExplorationAppListReq, opts ...grpc.CallOption) (*ExplorationAppList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExplorationAppList)
	err := c.cc.Invoke(ctx, AppService_GetExplorationAppList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ChangeExplorationAppFavorite(ctx context.Context, in *ChangeExplorationAppFavoriteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppService_ChangeExplorationAppFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) RecordAppHistory(ctx context.Context, in *RecordAppHistoryReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppService_RecordAppHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) PublishApp(ctx context.Context, in *PublishAppReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppService_PublishApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UnPublishApp(ctx context.Context, in *UnPublishAppReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppService_UnPublishApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetAppList(ctx context.Context, in *GetAppListReq, opts ...grpc.CallOption) (*AppList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppList)
	err := c.cc.Invoke(ctx, AppService_GetAppList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetAppListByIds(ctx context.Context, in *GetAppListByIdsReq, opts ...grpc.CallOption) (*AppList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppList)
	err := c.cc.Invoke(ctx, AppService_GetAppListByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppService_DeleteApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AppUrlCreate(ctx context.Context, in *AppUrlCreateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppService_AppUrlCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AppUrlDelete(ctx context.Context, in *AppUrlDeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppService_AppUrlDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AppUrlUpdate(ctx context.Context, in *AppUrlUpdateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppService_AppUrlUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetAppUrlList(ctx context.Context, in *GetAppUrlListReq, opts ...grpc.CallOption) (*GetAppUrlListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppUrlListResp)
	err := c.cc.Invoke(ctx, AppService_GetAppUrlList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetAppUrlInfoBySuffix(ctx context.Context, in *GetAppUrlInfoBySuffixReq, opts ...grpc.CallOption) (*AppUrlInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppUrlInfo)
	err := c.cc.Invoke(ctx, AppService_GetAppUrlInfoBySuffix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AppUrlStatusSwitch(ctx context.Context, in *AppUrlStatusSwitchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppService_AppUrlStatusSwitch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility.
type AppServiceServer interface {
	// --- apiKey ---
	GenApiKey(context.Context, *GenApiKeyReq) (*ApiKeyInfo, error)
	GetApiKeyList(context.Context, *GetApiKeyListReq) (*ApiKeyInfoList, error)
	DelApiKey(context.Context, *DelApiKeyReq) (*emptypb.Empty, error)
	GetApiKeyByKey(context.Context, *GetApiKeyByKeyReq) (*ApiKeyInfo, error)
	// --- exploration ---
	GetExplorationAppList(context.Context, *GetExplorationAppListReq) (*ExplorationAppList, error)
	ChangeExplorationAppFavorite(context.Context, *ChangeExplorationAppFavoriteReq) (*emptypb.Empty, error)
	RecordAppHistory(context.Context, *RecordAppHistoryReq) (*emptypb.Empty, error)
	// --- app ---
	PublishApp(context.Context, *PublishAppReq) (*emptypb.Empty, error)
	UnPublishApp(context.Context, *UnPublishAppReq) (*emptypb.Empty, error)
	GetAppList(context.Context, *GetAppListReq) (*AppList, error)
	GetAppListByIds(context.Context, *GetAppListByIdsReq) (*AppList, error)
	DeleteApp(context.Context, *DeleteAppReq) (*emptypb.Empty, error)
	// --- url ---
	AppUrlCreate(context.Context, *AppUrlCreateReq) (*emptypb.Empty, error)
	AppUrlDelete(context.Context, *AppUrlDeleteReq) (*emptypb.Empty, error)
	AppUrlUpdate(context.Context, *AppUrlUpdateReq) (*emptypb.Empty, error)
	GetAppUrlList(context.Context, *GetAppUrlListReq) (*GetAppUrlListResp, error)
	GetAppUrlInfoBySuffix(context.Context, *GetAppUrlInfoBySuffixReq) (*AppUrlInfo, error)
	AppUrlStatusSwitch(context.Context, *AppUrlStatusSwitchReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppServiceServer struct{}

func (UnimplementedAppServiceServer) GenApiKey(context.Context, *GenApiKeyReq) (*ApiKeyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenApiKey not implemented")
}
func (UnimplementedAppServiceServer) GetApiKeyList(context.Context, *GetApiKeyListReq) (*ApiKeyInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiKeyList not implemented")
}
func (UnimplementedAppServiceServer) DelApiKey(context.Context, *DelApiKeyReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelApiKey not implemented")
}
func (UnimplementedAppServiceServer) GetApiKeyByKey(context.Context, *GetApiKeyByKeyReq) (*ApiKeyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiKeyByKey not implemented")
}
func (UnimplementedAppServiceServer) GetExplorationAppList(context.Context, *GetExplorationAppListReq) (*ExplorationAppList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExplorationAppList not implemented")
}
func (UnimplementedAppServiceServer) ChangeExplorationAppFavorite(context.Context, *ChangeExplorationAppFavoriteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeExplorationAppFavorite not implemented")
}
func (UnimplementedAppServiceServer) RecordAppHistory(context.Context, *RecordAppHistoryReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordAppHistory not implemented")
}
func (UnimplementedAppServiceServer) PublishApp(context.Context, *PublishAppReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishApp not implemented")
}
func (UnimplementedAppServiceServer) UnPublishApp(context.Context, *UnPublishAppReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnPublishApp not implemented")
}
func (UnimplementedAppServiceServer) GetAppList(context.Context, *GetAppListReq) (*AppList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppList not implemented")
}
func (UnimplementedAppServiceServer) GetAppListByIds(context.Context, *GetAppListByIdsReq) (*AppList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppListByIds not implemented")
}
func (UnimplementedAppServiceServer) DeleteApp(context.Context, *DeleteAppReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedAppServiceServer) AppUrlCreate(context.Context, *AppUrlCreateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppUrlCreate not implemented")
}
func (UnimplementedAppServiceServer) AppUrlDelete(context.Context, *AppUrlDeleteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppUrlDelete not implemented")
}
func (UnimplementedAppServiceServer) AppUrlUpdate(context.Context, *AppUrlUpdateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppUrlUpdate not implemented")
}
func (UnimplementedAppServiceServer) GetAppUrlList(context.Context, *GetAppUrlListReq) (*GetAppUrlListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUrlList not implemented")
}
func (UnimplementedAppServiceServer) GetAppUrlInfoBySuffix(context.Context, *GetAppUrlInfoBySuffixReq) (*AppUrlInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUrlInfoBySuffix not implemented")
}
func (UnimplementedAppServiceServer) AppUrlStatusSwitch(context.Context, *AppUrlStatusSwitchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppUrlStatusSwitch not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}
func (UnimplementedAppServiceServer) testEmbeddedByValue()                    {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_GenApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenApiKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GenApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GenApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GenApiKey(ctx, req.(*GenApiKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetApiKeyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiKeyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetApiKeyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetApiKeyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetApiKeyList(ctx, req.(*GetApiKeyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DelApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelApiKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DelApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DelApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DelApiKey(ctx, req.(*DelApiKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetApiKeyByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiKeyByKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetApiKeyByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetApiKeyByKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetApiKeyByKey(ctx, req.(*GetApiKeyByKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetExplorationAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExplorationAppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetExplorationAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetExplorationAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetExplorationAppList(ctx, req.(*GetExplorationAppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ChangeExplorationAppFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeExplorationAppFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ChangeExplorationAppFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ChangeExplorationAppFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ChangeExplorationAppFavorite(ctx, req.(*ChangeExplorationAppFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_RecordAppHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordAppHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).RecordAppHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_RecordAppHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).RecordAppHistory(ctx, req.(*RecordAppHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_PublishApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).PublishApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_PublishApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).PublishApp(ctx, req.(*PublishAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UnPublishApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnPublishAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UnPublishApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_UnPublishApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UnPublishApp(ctx, req.(*UnPublishAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetAppList(ctx, req.(*GetAppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetAppListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppListByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetAppListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetAppListByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetAppListByIds(ctx, req.(*GetAppListByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteApp(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AppUrlCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUrlCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AppUrlCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_AppUrlCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AppUrlCreate(ctx, req.(*AppUrlCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AppUrlDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUrlDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AppUrlDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_AppUrlDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AppUrlDelete(ctx, req.(*AppUrlDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AppUrlUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUrlUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AppUrlUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_AppUrlUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AppUrlUpdate(ctx, req.(*AppUrlUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetAppUrlList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUrlListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetAppUrlList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetAppUrlList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetAppUrlList(ctx, req.(*GetAppUrlListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetAppUrlInfoBySuffix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUrlInfoBySuffixReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetAppUrlInfoBySuffix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetAppUrlInfoBySuffix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetAppUrlInfoBySuffix(ctx, req.(*GetAppUrlInfoBySuffixReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AppUrlStatusSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUrlStatusSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AppUrlStatusSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_AppUrlStatusSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AppUrlStatusSwitch(ctx, req.(*AppUrlStatusSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_service.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenApiKey",
			Handler:    _AppService_GenApiKey_Handler,
		},
		{
			MethodName: "GetApiKeyList",
			Handler:    _AppService_GetApiKeyList_Handler,
		},
		{
			MethodName: "DelApiKey",
			Handler:    _AppService_DelApiKey_Handler,
		},
		{
			MethodName: "GetApiKeyByKey",
			Handler:    _AppService_GetApiKeyByKey_Handler,
		},
		{
			MethodName: "GetExplorationAppList",
			Handler:    _AppService_GetExplorationAppList_Handler,
		},
		{
			MethodName: "ChangeExplorationAppFavorite",
			Handler:    _AppService_ChangeExplorationAppFavorite_Handler,
		},
		{
			MethodName: "RecordAppHistory",
			Handler:    _AppService_RecordAppHistory_Handler,
		},
		{
			MethodName: "PublishApp",
			Handler:    _AppService_PublishApp_Handler,
		},
		{
			MethodName: "UnPublishApp",
			Handler:    _AppService_UnPublishApp_Handler,
		},
		{
			MethodName: "GetAppList",
			Handler:    _AppService_GetAppList_Handler,
		},
		{
			MethodName: "GetAppListByIds",
			Handler:    _AppService_GetAppListByIds_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AppService_DeleteApp_Handler,
		},
		{
			MethodName: "AppUrlCreate",
			Handler:    _AppService_AppUrlCreate_Handler,
		},
		{
			MethodName: "AppUrlDelete",
			Handler:    _AppService_AppUrlDelete_Handler,
		},
		{
			MethodName: "AppUrlUpdate",
			Handler:    _AppService_AppUrlUpdate_Handler,
		},
		{
			MethodName: "GetAppUrlList",
			Handler:    _AppService_GetAppUrlList_Handler,
		},
		{
			MethodName: "GetAppUrlInfoBySuffix",
			Handler:    _AppService_GetAppUrlInfoBySuffix_Handler,
		},
		{
			MethodName: "AppUrlStatusSwitch",
			Handler:    _AppService_AppUrlStatusSwitch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/app-service/app-service.proto",
}
