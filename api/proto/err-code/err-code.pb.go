// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.29.4
// source: proto/err-code/err-code.proto

package err_code

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Code int32

const (
	Code_OK Code = 0
	// --- bff-service ---
	// [110000, 119999]
	Code_BFFGeneral    Code = 110000 // 通用错误
	Code_BFFInvalidArg Code = 110001 // 参数错误
	Code_BFFJWT        Code = 110002 // JWT错误
	Code_BFFAuth       Code = 110003 // Auth错误
	// --- iam-service ---
	// [120000, 129999]
	Code_IAMGeneral  Code = 120000 // 通用错误
	Code_IAMInternal Code = 120001 // 内部错误
	Code_IAMCaptcha  Code = 120002 // 验证码错误
	Code_IAMLogin    Code = 120003 // 登录相关错误
	Code_IAMOrg      Code = 120011 // 组织相关错误
	Code_IAMRole     Code = 120021 // 角色相关错误
	Code_IAMUser     Code = 120031 // 用户相关错误
	// --- perm-service ---
	// [120000, 129999]
	Code_PermGeneral     Code = 130000 // 通用错误
	Code_PermRBAC        Code = 130001 // 权限校验错误
	Code_PermRBACReLogin Code = 130002 // 权限校验错误(需要重新登录)
	// --- rag-service ---
	// [150000, 159999]
	Code_RagGeneral      Code = 150000 // 通用错误
	Code_RagRole         Code = 150001 // 角色权限错误
	Code_RagInfoNotExist Code = 150002 // rag信息不存在
	Code_RagDeleteErr    Code = 150003 // 删除rag错误
	Code_RagGetErr       Code = 150004 // 获取rag错误
	Code_RagListErr      Code = 150005 // 获取rag列表错误
	Code_RagCreateErr    Code = 150006 // rag创建错误
	Code_RagUpdateErr    Code = 150007 // rag更新错误
	Code_RagChatErr      Code = 150008 // rag流式传输问答错误
	// --- assistant-service ---
	// [160000, 169999]
	Code_AssistantGeneral         Code = 160000 // 通用错误
	Code_AssistantErr             Code = 160001 // 智能体相关错误
	Code_AssistantActionErr       Code = 160002 // 智能体action相关错误
	Code_AssistantWorkflowErr     Code = 160003 // 智能体workflow相关错误
	Code_AssistantConversationErr Code = 160004 // 智能体对话相关错误
	// --- model-service ---
	Code_ModelGeneral           Code = 250000 // 通用错误
	Code_ModelImportedModel     Code = 250001 // 导入模型错误
	Code_ModelGetModelById      Code = 250002 // 根据模型ID查询错误
	Code_ModelUpdateModel       Code = 250003 // 模型更新错误
	Code_ModelDeleteModel       Code = 250004 // 模型删除错误
	Code_ModelGetModel          Code = 250005 // 模型查询错误
	Code_ModelListModels        Code = 250006 // 模型列表错误
	Code_ModelChangeModelStatus Code = 250007 // 模型启用/关停错误
	Code_ModelListTypeModels    Code = 250008 // 模型llm/rerank/embedding列表错误
	Code_ModelGetModelByIds     Code = 250009 // 根据模型ID列表查询错误
	// --- knowledge-base-service ---
	Code_KnowledgeGeneral                    Code = 140000 // 系统异常，请稍后重试
	Code_KnowledgeBaseCreateFailed           Code = 141001 // 新建知识库失败，请稍后重试
	Code_KnowledgeBaseDeleteFailed           Code = 141002 // 删除知识库失败，请稍后重试
	Code_KnowledgeBaseUpdateFailed           Code = 141003 // 修改知识库失败，请稍后重试
	Code_KnowledgeBaseFetchFailed            Code = 141004 // 获取知识库失败，请稍后重试
	Code_KnowledgeBaseAccessDenied           Code = 141005 // 没有操作该知识库的权限
	Code_KnowledgeBaseDeleteDuringUpload     Code = 141006 // 知识库正在上传文档，不可删除
	Code_KnowledgeBaseDeleteDuringParse      Code = 141007 // 知识库正在解析文档，不可删除
	Code_KnowledgeBaseDuplicateName          Code = 141008 // 已存在同名知识库
	Code_KnowledgeBaseSelectFailed           Code = 141009 // 查询知识库列表失败，请稍后重试
	Code_KnowledgeDocDeleteDuringParse       Code = 142001 // 文档正在解析文档，不可删除
	Code_KnowledgeDocDeleteFailed            Code = 142002 // 文档删除失败，请稍后重试
	Code_KnowledgeDocSegmentStatusUpdateFail Code = 142003 // 修改文档分段状态失败，请稍后重试
	Code_KnowledgeDocImportFail              Code = 142004 // 文档导入失败，请稍后重试
	Code_KnowledgeDocSplitFailed             Code = 142005 // 文档分片查询失败，请稍后重试
	Code_KnowledgeDocUpdateStatusFailed      Code = 142006 // 更新文档状态失败，请稍后重试
	Code_KnowledgeDocImportUrlFailed         Code = 142007 // 获取上传文档失败，请稍后重试
	// --- app-service ---
	// [300000, 309999]
	Code_AppGeneral     Code = 300000 // 通用错误
	Code_AppApikey      Code = 300001 // ApiKey相关错误
	Code_AppExploration Code = 300002 // APP探索广场相关错误
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0:      "OK",
		110000: "BFFGeneral",
		110001: "BFFInvalidArg",
		110002: "BFFJWT",
		110003: "BFFAuth",
		120000: "IAMGeneral",
		120001: "IAMInternal",
		120002: "IAMCaptcha",
		120003: "IAMLogin",
		120011: "IAMOrg",
		120021: "IAMRole",
		120031: "IAMUser",
		130000: "PermGeneral",
		130001: "PermRBAC",
		130002: "PermRBACReLogin",
		150000: "RagGeneral",
		150001: "RagRole",
		150002: "RagInfoNotExist",
		150003: "RagDeleteErr",
		150004: "RagGetErr",
		150005: "RagListErr",
		150006: "RagCreateErr",
		150007: "RagUpdateErr",
		150008: "RagChatErr",
		160000: "AssistantGeneral",
		160001: "AssistantErr",
		160002: "AssistantActionErr",
		160003: "AssistantWorkflowErr",
		160004: "AssistantConversationErr",
		250000: "ModelGeneral",
		250001: "ModelImportedModel",
		250002: "ModelGetModelById",
		250003: "ModelUpdateModel",
		250004: "ModelDeleteModel",
		250005: "ModelGetModel",
		250006: "ModelListModels",
		250007: "ModelChangeModelStatus",
		250008: "ModelListTypeModels",
		250009: "ModelGetModelByIds",
		140000: "KnowledgeGeneral",
		141001: "KnowledgeBaseCreateFailed",
		141002: "KnowledgeBaseDeleteFailed",
		141003: "KnowledgeBaseUpdateFailed",
		141004: "KnowledgeBaseFetchFailed",
		141005: "KnowledgeBaseAccessDenied",
		141006: "KnowledgeBaseDeleteDuringUpload",
		141007: "KnowledgeBaseDeleteDuringParse",
		141008: "KnowledgeBaseDuplicateName",
		141009: "KnowledgeBaseSelectFailed",
		142001: "KnowledgeDocDeleteDuringParse",
		142002: "KnowledgeDocDeleteFailed",
		142003: "KnowledgeDocSegmentStatusUpdateFail",
		142004: "KnowledgeDocImportFail",
		142005: "KnowledgeDocSplitFailed",
		142006: "KnowledgeDocUpdateStatusFailed",
		142007: "KnowledgeDocImportUrlFailed",
		300000: "AppGeneral",
		300001: "AppApikey",
		300002: "AppExploration",
	}
	Code_value = map[string]int32{
		"OK":                                  0,
		"BFFGeneral":                          110000,
		"BFFInvalidArg":                       110001,
		"BFFJWT":                              110002,
		"BFFAuth":                             110003,
		"IAMGeneral":                          120000,
		"IAMInternal":                         120001,
		"IAMCaptcha":                          120002,
		"IAMLogin":                            120003,
		"IAMOrg":                              120011,
		"IAMRole":                             120021,
		"IAMUser":                             120031,
		"PermGeneral":                         130000,
		"PermRBAC":                            130001,
		"PermRBACReLogin":                     130002,
		"RagGeneral":                          150000,
		"RagRole":                             150001,
		"RagInfoNotExist":                     150002,
		"RagDeleteErr":                        150003,
		"RagGetErr":                           150004,
		"RagListErr":                          150005,
		"RagCreateErr":                        150006,
		"RagUpdateErr":                        150007,
		"RagChatErr":                          150008,
		"AssistantGeneral":                    160000,
		"AssistantErr":                        160001,
		"AssistantActionErr":                  160002,
		"AssistantWorkflowErr":                160003,
		"AssistantConversationErr":            160004,
		"ModelGeneral":                        250000,
		"ModelImportedModel":                  250001,
		"ModelGetModelById":                   250002,
		"ModelUpdateModel":                    250003,
		"ModelDeleteModel":                    250004,
		"ModelGetModel":                       250005,
		"ModelListModels":                     250006,
		"ModelChangeModelStatus":              250007,
		"ModelListTypeModels":                 250008,
		"ModelGetModelByIds":                  250009,
		"KnowledgeGeneral":                    140000,
		"KnowledgeBaseCreateFailed":           141001,
		"KnowledgeBaseDeleteFailed":           141002,
		"KnowledgeBaseUpdateFailed":           141003,
		"KnowledgeBaseFetchFailed":            141004,
		"KnowledgeBaseAccessDenied":           141005,
		"KnowledgeBaseDeleteDuringUpload":     141006,
		"KnowledgeBaseDeleteDuringParse":      141007,
		"KnowledgeBaseDuplicateName":          141008,
		"KnowledgeBaseSelectFailed":           141009,
		"KnowledgeDocDeleteDuringParse":       142001,
		"KnowledgeDocDeleteFailed":            142002,
		"KnowledgeDocSegmentStatusUpdateFail": 142003,
		"KnowledgeDocImportFail":              142004,
		"KnowledgeDocSplitFailed":             142005,
		"KnowledgeDocUpdateStatusFailed":      142006,
		"KnowledgeDocImportUrlFailed":         142007,
		"AppGeneral":                          300000,
		"AppApikey":                           300001,
		"AppExploration":                      300002,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_err_code_err_code_proto_enumTypes[0].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_proto_err_code_err_code_proto_enumTypes[0]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_proto_err_code_err_code_proto_rawDescGZIP(), []int{0}
}

var File_proto_err_code_err_code_proto protoreflect.FileDescriptor

var file_proto_err_code_err_code_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x72, 0x72, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x2f, 0x65, 0x72, 0x72, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0x9b, 0x0b, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0a, 0x42, 0x46,
	0x46, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0xb0, 0xdb, 0x06, 0x12, 0x13, 0x0a, 0x0d,
	0x42, 0x46, 0x46, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x72, 0x67, 0x10, 0xb1, 0xdb,
	0x06, 0x12, 0x0c, 0x0a, 0x06, 0x42, 0x46, 0x46, 0x4a, 0x57, 0x54, 0x10, 0xb2, 0xdb, 0x06, 0x12,
	0x0d, 0x0a, 0x07, 0x42, 0x46, 0x46, 0x41, 0x75, 0x74, 0x68, 0x10, 0xb3, 0xdb, 0x06, 0x12, 0x10,
	0x0a, 0x0a, 0x49, 0x41, 0x4d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0xc0, 0xa9, 0x07,
	0x12, 0x11, 0x0a, 0x0b, 0x49, 0x41, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10,
	0xc1, 0xa9, 0x07, 0x12, 0x10, 0x0a, 0x0a, 0x49, 0x41, 0x4d, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68,
	0x61, 0x10, 0xc2, 0xa9, 0x07, 0x12, 0x0e, 0x0a, 0x08, 0x49, 0x41, 0x4d, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x10, 0xc3, 0xa9, 0x07, 0x12, 0x0c, 0x0a, 0x06, 0x49, 0x41, 0x4d, 0x4f, 0x72, 0x67, 0x10,
	0xcb, 0xa9, 0x07, 0x12, 0x0d, 0x0a, 0x07, 0x49, 0x41, 0x4d, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0xd5,
	0xa9, 0x07, 0x12, 0x0d, 0x0a, 0x07, 0x49, 0x41, 0x4d, 0x55, 0x73, 0x65, 0x72, 0x10, 0xdf, 0xa9,
	0x07, 0x12, 0x11, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x10, 0xd0, 0xf7, 0x07, 0x12, 0x0e, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x42, 0x41, 0x43,
	0x10, 0xd1, 0xf7, 0x07, 0x12, 0x15, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x42, 0x41, 0x43,
	0x52, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0xd2, 0xf7, 0x07, 0x12, 0x10, 0x0a, 0x0a, 0x52,
	0x61, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0xf0, 0x93, 0x09, 0x12, 0x0d, 0x0a,
	0x07, 0x52, 0x61, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0xf1, 0x93, 0x09, 0x12, 0x15, 0x0a, 0x0f,
	0x52, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10,
	0xf2, 0x93, 0x09, 0x12, 0x12, 0x0a, 0x0c, 0x52, 0x61, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x72, 0x72, 0x10, 0xf3, 0x93, 0x09, 0x12, 0x0f, 0x0a, 0x09, 0x52, 0x61, 0x67, 0x47, 0x65,
	0x74, 0x45, 0x72, 0x72, 0x10, 0xf4, 0x93, 0x09, 0x12, 0x10, 0x0a, 0x0a, 0x52, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x10, 0xf5, 0x93, 0x09, 0x12, 0x12, 0x0a, 0x0c, 0x52, 0x61,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x10, 0xf6, 0x93, 0x09, 0x12, 0x12,
	0x0a, 0x0c, 0x52, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x10, 0xf7,
	0x93, 0x09, 0x12, 0x10, 0x0a, 0x0a, 0x52, 0x61, 0x67, 0x43, 0x68, 0x61, 0x74, 0x45, 0x72, 0x72,
	0x10, 0xf8, 0x93, 0x09, 0x12, 0x16, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x80, 0xe2, 0x09, 0x12, 0x12, 0x0a, 0x0c,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x10, 0x81, 0xe2, 0x09,
	0x12, 0x18, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x10, 0x82, 0xe2, 0x09, 0x12, 0x1a, 0x0a, 0x14, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x72, 0x72, 0x10, 0x83, 0xe2, 0x09, 0x12, 0x1e, 0x0a, 0x18, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x10, 0x84, 0xe2, 0x09, 0x12, 0x12, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x90, 0xa1, 0x0f, 0x12, 0x18, 0x0a, 0x12, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x10, 0x91, 0xa1, 0x0f, 0x12, 0x17, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x10, 0x92, 0xa1, 0x0f, 0x12, 0x16, 0x0a,
	0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x10, 0x93, 0xa1, 0x0f, 0x12, 0x16, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x10, 0x94, 0xa1, 0x0f, 0x12, 0x13, 0x0a,
	0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x10, 0x95,
	0xa1, 0x0f, 0x12, 0x15, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x10, 0x96, 0xa1, 0x0f, 0x12, 0x1c, 0x0a, 0x16, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x97, 0xa1, 0x0f, 0x12, 0x19, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x10, 0x98,
	0xa1, 0x0f, 0x12, 0x18, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x73, 0x10, 0x99, 0xa1, 0x0f, 0x12, 0x16, 0x0a, 0x10,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x10, 0xe0, 0xc5, 0x08, 0x12, 0x1f, 0x0a, 0x19, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0xc9, 0xcd, 0x08, 0x12, 0x1f, 0x0a, 0x19, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x10, 0xca, 0xcd, 0x08, 0x12, 0x1f, 0x0a, 0x19, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0xcb, 0xcd, 0x08, 0x12, 0x1e, 0x0a, 0x18, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0xcc, 0xcd, 0x08, 0x12, 0x1f, 0x0a, 0x19, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x10, 0xcd, 0xcd, 0x08, 0x12, 0x25, 0x0a, 0x1f, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0xce, 0xcd, 0x08, 0x12,
	0x24, 0x0a, 0x1e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x10, 0xcf, 0xcd, 0x08, 0x12, 0x20, 0x0a, 0x1a, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x10, 0xd0, 0xcd, 0x08, 0x12, 0x1f, 0x0a, 0x19, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0xd1, 0xcd, 0x08, 0x12, 0x23, 0x0a, 0x1d, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x73, 0x65, 0x10, 0xb1, 0xd5, 0x08, 0x12, 0x1e, 0x0a,
	0x18, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xb2, 0xd5, 0x08, 0x12, 0x29, 0x0a,
	0x23, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x10, 0xb3, 0xd5, 0x08, 0x12, 0x1c, 0x0a, 0x16, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x10, 0xb4, 0xd5, 0x08, 0x12, 0x1d, 0x0a, 0x17, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0xb5, 0xd5, 0x08, 0x12, 0x24, 0x0a, 0x1e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x44, 0x6f, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xb6, 0xd5, 0x08, 0x12, 0x21, 0x0a, 0x1b, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x55, 0x72, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xb7, 0xd5, 0x08, 0x12, 0x10,
	0x0a, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0xe0, 0xa7, 0x12,
	0x12, 0x0f, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x41, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x10, 0xe1, 0xa7,
	0x12, 0x12, 0x14, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0xe2, 0xa7, 0x12, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x6d, 0x41, 0x49, 0x2f, 0x77,
	0x61, 0x6e, 0x77, 0x75, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65,
	0x72, 0x72, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_err_code_err_code_proto_rawDescOnce sync.Once
	file_proto_err_code_err_code_proto_rawDescData = file_proto_err_code_err_code_proto_rawDesc
)

func file_proto_err_code_err_code_proto_rawDescGZIP() []byte {
	file_proto_err_code_err_code_proto_rawDescOnce.Do(func() {
		file_proto_err_code_err_code_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_err_code_err_code_proto_rawDescData)
	})
	return file_proto_err_code_err_code_proto_rawDescData
}

var file_proto_err_code_err_code_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_err_code_err_code_proto_goTypes = []interface{}{
	(Code)(0), // 0: err_code.Code
}
var file_proto_err_code_err_code_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_err_code_err_code_proto_init() }
func file_proto_err_code_err_code_proto_init() {
	if File_proto_err_code_err_code_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_err_code_err_code_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_err_code_err_code_proto_goTypes,
		DependencyIndexes: file_proto_err_code_err_code_proto_depIdxs,
		EnumInfos:         file_proto_err_code_err_code_proto_enumTypes,
	}.Build()
	File_proto_err_code_err_code_proto = out.File
	file_proto_err_code_err_code_proto_rawDesc = nil
	file_proto_err_code_err_code_proto_goTypes = nil
	file_proto_err_code_err_code_proto_depIdxs = nil
}
