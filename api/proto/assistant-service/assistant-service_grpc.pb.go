// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/assistant-service/assistant-service.proto

package assistant_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssistantService_GetAssistantByIds_FullMethodName               = "/assistant_service.AssistantService/GetAssistantByIds"
	AssistantService_AssistantCreate_FullMethodName                 = "/assistant_service.AssistantService/AssistantCreate"
	AssistantService_AssistantUpdate_FullMethodName                 = "/assistant_service.AssistantService/AssistantUpdate"
	AssistantService_AssistantConfigUpdate_FullMethodName           = "/assistant_service.AssistantService/AssistantConfigUpdate"
	AssistantService_AssistantDelete_FullMethodName                 = "/assistant_service.AssistantService/AssistantDelete"
	AssistantService_GetAssistantListMyAll_FullMethodName           = "/assistant_service.AssistantService/GetAssistantListMyAll"
	AssistantService_GetAssistantInfo_FullMethodName                = "/assistant_service.AssistantService/GetAssistantInfo"
	AssistantService_AssistantWorkFlowCreate_FullMethodName         = "/assistant_service.AssistantService/AssistantWorkFlowCreate"
	AssistantService_AssistantWorkFlowDelete_FullMethodName         = "/assistant_service.AssistantService/AssistantWorkFlowDelete"
	AssistantService_AssistantWorkFlowEnableSwitch_FullMethodName   = "/assistant_service.AssistantService/AssistantWorkFlowEnableSwitch"
	AssistantService_AssistantActionCreate_FullMethodName           = "/assistant_service.AssistantService/AssistantActionCreate"
	AssistantService_AssistantActionDelete_FullMethodName           = "/assistant_service.AssistantService/AssistantActionDelete"
	AssistantService_AssistantActionUpdate_FullMethodName           = "/assistant_service.AssistantService/AssistantActionUpdate"
	AssistantService_GetAssistantActionInfo_FullMethodName          = "/assistant_service.AssistantService/GetAssistantActionInfo"
	AssistantService_AssistantActionEnableSwitch_FullMethodName     = "/assistant_service.AssistantService/AssistantActionEnableSwitch"
	AssistantService_ConversationCreate_FullMethodName              = "/assistant_service.AssistantService/ConversationCreate"
	AssistantService_ConversationDelete_FullMethodName              = "/assistant_service.AssistantService/ConversationDelete"
	AssistantService_GetConversationList_FullMethodName             = "/assistant_service.AssistantService/GetConversationList"
	AssistantService_GetConversationDetailList_FullMethodName       = "/assistant_service.AssistantService/GetConversationDetailList"
	AssistantService_AssistantConversionStream_FullMethodName       = "/assistant_service.AssistantService/AssistantConversionStream"
	AssistantService_ConversationDeleteByAssistantId_FullMethodName = "/assistant_service.AssistantService/ConversationDeleteByAssistantId"
)

// AssistantServiceClient is the client API for AssistantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssistantServiceClient interface {
	// --- assistant ---
	GetAssistantByIds(ctx context.Context, in *GetAssistantByIdsReq, opts ...grpc.CallOption) (*AppBriefList, error)
	AssistantCreate(ctx context.Context, in *AssistantCreateReq, opts ...grpc.CallOption) (*AssistantCreateResp, error)
	AssistantUpdate(ctx context.Context, in *AssistantUpdateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AssistantConfigUpdate(ctx context.Context, in *AssistantConfigUpdateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AssistantDelete(ctx context.Context, in *AssistantDeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAssistantListMyAll(ctx context.Context, in *GetAssistantListMyAllReq, opts ...grpc.CallOption) (*AppBriefList, error)
	GetAssistantInfo(ctx context.Context, in *GetAssistantInfoReq, opts ...grpc.CallOption) (*AssistantInfo, error)
	// --- workFlow ---
	AssistantWorkFlowCreate(ctx context.Context, in *AssistantWorkFlowCreateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AssistantWorkFlowDelete(ctx context.Context, in *AssistantWorkFlowDeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AssistantWorkFlowEnableSwitch(ctx context.Context, in *AssistantWorkFlowEnableSwitchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// --- action ---
	AssistantActionCreate(ctx context.Context, in *AssistantActionCreateReq, opts ...grpc.CallOption) (*AssistantActionCreateResp, error)
	AssistantActionDelete(ctx context.Context, in *AssistantActionDeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AssistantActionUpdate(ctx context.Context, in *AssistantActionUpdateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAssistantActionInfo(ctx context.Context, in *GetAssistantActionInfoReq, opts ...grpc.CallOption) (*GetAssistantActionInfoResp, error)
	AssistantActionEnableSwitch(ctx context.Context, in *AssistantActionEnableSwitchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// --- conversation ---
	ConversationCreate(ctx context.Context, in *ConversationCreateReq, opts ...grpc.CallOption) (*ConversationCreateResp, error)
	ConversationDelete(ctx context.Context, in *ConversationDeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetConversationList(ctx context.Context, in *GetConversationListReq, opts ...grpc.CallOption) (*GetConversationListResp, error)
	GetConversationDetailList(ctx context.Context, in *GetConversationDetailListReq, opts ...grpc.CallOption) (*GetConversationDetailListResp, error)
	AssistantConversionStream(ctx context.Context, in *AssistantConversionStreamReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AssistantConversionStreamResp], error)
	ConversationDeleteByAssistantId(ctx context.Context, in *ConversationDeleteByAssistantIdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type assistantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssistantServiceClient(cc grpc.ClientConnInterface) AssistantServiceClient {
	return &assistantServiceClient{cc}
}

func (c *assistantServiceClient) GetAssistantByIds(ctx context.Context, in *GetAssistantByIdsReq, opts ...grpc.CallOption) (*AppBriefList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppBriefList)
	err := c.cc.Invoke(ctx, AssistantService_GetAssistantByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) AssistantCreate(ctx context.Context, in *AssistantCreateReq, opts ...grpc.CallOption) (*AssistantCreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssistantCreateResp)
	err := c.cc.Invoke(ctx, AssistantService_AssistantCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) AssistantUpdate(ctx context.Context, in *AssistantUpdateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssistantService_AssistantUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) AssistantConfigUpdate(ctx context.Context, in *AssistantConfigUpdateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssistantService_AssistantConfigUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) AssistantDelete(ctx context.Context, in *AssistantDeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssistantService_AssistantDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAssistantListMyAll(ctx context.Context, in *GetAssistantListMyAllReq, opts ...grpc.CallOption) (*AppBriefList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppBriefList)
	err := c.cc.Invoke(ctx, AssistantService_GetAssistantListMyAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAssistantInfo(ctx context.Context, in *GetAssistantInfoReq, opts ...grpc.CallOption) (*AssistantInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssistantInfo)
	err := c.cc.Invoke(ctx, AssistantService_GetAssistantInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) AssistantWorkFlowCreate(ctx context.Context, in *AssistantWorkFlowCreateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssistantService_AssistantWorkFlowCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) AssistantWorkFlowDelete(ctx context.Context, in *AssistantWorkFlowDeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssistantService_AssistantWorkFlowDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) AssistantWorkFlowEnableSwitch(ctx context.Context, in *AssistantWorkFlowEnableSwitchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssistantService_AssistantWorkFlowEnableSwitch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) AssistantActionCreate(ctx context.Context, in *AssistantActionCreateReq, opts ...grpc.CallOption) (*AssistantActionCreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssistantActionCreateResp)
	err := c.cc.Invoke(ctx, AssistantService_AssistantActionCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) AssistantActionDelete(ctx context.Context, in *AssistantActionDeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssistantService_AssistantActionDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) AssistantActionUpdate(ctx context.Context, in *AssistantActionUpdateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssistantService_AssistantActionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAssistantActionInfo(ctx context.Context, in *GetAssistantActionInfoReq, opts ...grpc.CallOption) (*GetAssistantActionInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantActionInfoResp)
	err := c.cc.Invoke(ctx, AssistantService_GetAssistantActionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) AssistantActionEnableSwitch(ctx context.Context, in *AssistantActionEnableSwitchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssistantService_AssistantActionEnableSwitch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) ConversationCreate(ctx context.Context, in *ConversationCreateReq, opts ...grpc.CallOption) (*ConversationCreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConversationCreateResp)
	err := c.cc.Invoke(ctx, AssistantService_ConversationCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) ConversationDelete(ctx context.Context, in *ConversationDeleteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssistantService_ConversationDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetConversationList(ctx context.Context, in *GetConversationListReq, opts ...grpc.CallOption) (*GetConversationListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationListResp)
	err := c.cc.Invoke(ctx, AssistantService_GetConversationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetConversationDetailList(ctx context.Context, in *GetConversationDetailListReq, opts ...grpc.CallOption) (*GetConversationDetailListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationDetailListResp)
	err := c.cc.Invoke(ctx, AssistantService_GetConversationDetailList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) AssistantConversionStream(ctx context.Context, in *AssistantConversionStreamReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AssistantConversionStreamResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AssistantService_ServiceDesc.Streams[0], AssistantService_AssistantConversionStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AssistantConversionStreamReq, AssistantConversionStreamResp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AssistantService_AssistantConversionStreamClient = grpc.ServerStreamingClient[AssistantConversionStreamResp]

func (c *assistantServiceClient) ConversationDeleteByAssistantId(ctx context.Context, in *ConversationDeleteByAssistantIdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssistantService_ConversationDeleteByAssistantId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssistantServiceServer is the server API for AssistantService service.
// All implementations must embed UnimplementedAssistantServiceServer
// for forward compatibility.
type AssistantServiceServer interface {
	// --- assistant ---
	GetAssistantByIds(context.Context, *GetAssistantByIdsReq) (*AppBriefList, error)
	AssistantCreate(context.Context, *AssistantCreateReq) (*AssistantCreateResp, error)
	AssistantUpdate(context.Context, *AssistantUpdateReq) (*emptypb.Empty, error)
	AssistantConfigUpdate(context.Context, *AssistantConfigUpdateReq) (*emptypb.Empty, error)
	AssistantDelete(context.Context, *AssistantDeleteReq) (*emptypb.Empty, error)
	GetAssistantListMyAll(context.Context, *GetAssistantListMyAllReq) (*AppBriefList, error)
	GetAssistantInfo(context.Context, *GetAssistantInfoReq) (*AssistantInfo, error)
	// --- workFlow ---
	AssistantWorkFlowCreate(context.Context, *AssistantWorkFlowCreateReq) (*emptypb.Empty, error)
	AssistantWorkFlowDelete(context.Context, *AssistantWorkFlowDeleteReq) (*emptypb.Empty, error)
	AssistantWorkFlowEnableSwitch(context.Context, *AssistantWorkFlowEnableSwitchReq) (*emptypb.Empty, error)
	// --- action ---
	AssistantActionCreate(context.Context, *AssistantActionCreateReq) (*AssistantActionCreateResp, error)
	AssistantActionDelete(context.Context, *AssistantActionDeleteReq) (*emptypb.Empty, error)
	AssistantActionUpdate(context.Context, *AssistantActionUpdateReq) (*emptypb.Empty, error)
	GetAssistantActionInfo(context.Context, *GetAssistantActionInfoReq) (*GetAssistantActionInfoResp, error)
	AssistantActionEnableSwitch(context.Context, *AssistantActionEnableSwitchReq) (*emptypb.Empty, error)
	// --- conversation ---
	ConversationCreate(context.Context, *ConversationCreateReq) (*ConversationCreateResp, error)
	ConversationDelete(context.Context, *ConversationDeleteReq) (*emptypb.Empty, error)
	GetConversationList(context.Context, *GetConversationListReq) (*GetConversationListResp, error)
	GetConversationDetailList(context.Context, *GetConversationDetailListReq) (*GetConversationDetailListResp, error)
	AssistantConversionStream(*AssistantConversionStreamReq, grpc.ServerStreamingServer[AssistantConversionStreamResp]) error
	ConversationDeleteByAssistantId(context.Context, *ConversationDeleteByAssistantIdReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedAssistantServiceServer()
}

// UnimplementedAssistantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssistantServiceServer struct{}

func (UnimplementedAssistantServiceServer) GetAssistantByIds(context.Context, *GetAssistantByIdsReq) (*AppBriefList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistantByIds not implemented")
}
func (UnimplementedAssistantServiceServer) AssistantCreate(context.Context, *AssistantCreateReq) (*AssistantCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssistantCreate not implemented")
}
func (UnimplementedAssistantServiceServer) AssistantUpdate(context.Context, *AssistantUpdateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssistantUpdate not implemented")
}
func (UnimplementedAssistantServiceServer) AssistantConfigUpdate(context.Context, *AssistantConfigUpdateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssistantConfigUpdate not implemented")
}
func (UnimplementedAssistantServiceServer) AssistantDelete(context.Context, *AssistantDeleteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssistantDelete not implemented")
}
func (UnimplementedAssistantServiceServer) GetAssistantListMyAll(context.Context, *GetAssistantListMyAllReq) (*AppBriefList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistantListMyAll not implemented")
}
func (UnimplementedAssistantServiceServer) GetAssistantInfo(context.Context, *GetAssistantInfoReq) (*AssistantInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistantInfo not implemented")
}
func (UnimplementedAssistantServiceServer) AssistantWorkFlowCreate(context.Context, *AssistantWorkFlowCreateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssistantWorkFlowCreate not implemented")
}
func (UnimplementedAssistantServiceServer) AssistantWorkFlowDelete(context.Context, *AssistantWorkFlowDeleteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssistantWorkFlowDelete not implemented")
}
func (UnimplementedAssistantServiceServer) AssistantWorkFlowEnableSwitch(context.Context, *AssistantWorkFlowEnableSwitchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssistantWorkFlowEnableSwitch not implemented")
}
func (UnimplementedAssistantServiceServer) AssistantActionCreate(context.Context, *AssistantActionCreateReq) (*AssistantActionCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssistantActionCreate not implemented")
}
func (UnimplementedAssistantServiceServer) AssistantActionDelete(context.Context, *AssistantActionDeleteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssistantActionDelete not implemented")
}
func (UnimplementedAssistantServiceServer) AssistantActionUpdate(context.Context, *AssistantActionUpdateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssistantActionUpdate not implemented")
}
func (UnimplementedAssistantServiceServer) GetAssistantActionInfo(context.Context, *GetAssistantActionInfoReq) (*GetAssistantActionInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistantActionInfo not implemented")
}
func (UnimplementedAssistantServiceServer) AssistantActionEnableSwitch(context.Context, *AssistantActionEnableSwitchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssistantActionEnableSwitch not implemented")
}
func (UnimplementedAssistantServiceServer) ConversationCreate(context.Context, *ConversationCreateReq) (*ConversationCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationCreate not implemented")
}
func (UnimplementedAssistantServiceServer) ConversationDelete(context.Context, *ConversationDeleteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationDelete not implemented")
}
func (UnimplementedAssistantServiceServer) GetConversationList(context.Context, *GetConversationListReq) (*GetConversationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationList not implemented")
}
func (UnimplementedAssistantServiceServer) GetConversationDetailList(context.Context, *GetConversationDetailListReq) (*GetConversationDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationDetailList not implemented")
}
func (UnimplementedAssistantServiceServer) AssistantConversionStream(*AssistantConversionStreamReq, grpc.ServerStreamingServer[AssistantConversionStreamResp]) error {
	return status.Errorf(codes.Unimplemented, "method AssistantConversionStream not implemented")
}
func (UnimplementedAssistantServiceServer) ConversationDeleteByAssistantId(context.Context, *ConversationDeleteByAssistantIdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationDeleteByAssistantId not implemented")
}
func (UnimplementedAssistantServiceServer) mustEmbedUnimplementedAssistantServiceServer() {}
func (UnimplementedAssistantServiceServer) testEmbeddedByValue()                          {}

// UnsafeAssistantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssistantServiceServer will
// result in compilation errors.
type UnsafeAssistantServiceServer interface {
	mustEmbedUnimplementedAssistantServiceServer()
}

func RegisterAssistantServiceServer(s grpc.ServiceRegistrar, srv AssistantServiceServer) {
	// If the following call pancis, it indicates UnimplementedAssistantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AssistantService_ServiceDesc, srv)
}

func _AssistantService_GetAssistantByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAssistantByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAssistantByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAssistantByIds(ctx, req.(*GetAssistantByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_AssistantCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistantCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).AssistantCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_AssistantCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).AssistantCreate(ctx, req.(*AssistantCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_AssistantUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistantUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).AssistantUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_AssistantUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).AssistantUpdate(ctx, req.(*AssistantUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_AssistantConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistantConfigUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).AssistantConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_AssistantConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).AssistantConfigUpdate(ctx, req.(*AssistantConfigUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_AssistantDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistantDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).AssistantDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_AssistantDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).AssistantDelete(ctx, req.(*AssistantDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAssistantListMyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantListMyAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAssistantListMyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAssistantListMyAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAssistantListMyAll(ctx, req.(*GetAssistantListMyAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAssistantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAssistantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAssistantInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAssistantInfo(ctx, req.(*GetAssistantInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_AssistantWorkFlowCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistantWorkFlowCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).AssistantWorkFlowCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_AssistantWorkFlowCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).AssistantWorkFlowCreate(ctx, req.(*AssistantWorkFlowCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_AssistantWorkFlowDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistantWorkFlowDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).AssistantWorkFlowDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_AssistantWorkFlowDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).AssistantWorkFlowDelete(ctx, req.(*AssistantWorkFlowDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_AssistantWorkFlowEnableSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistantWorkFlowEnableSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).AssistantWorkFlowEnableSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_AssistantWorkFlowEnableSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).AssistantWorkFlowEnableSwitch(ctx, req.(*AssistantWorkFlowEnableSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_AssistantActionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistantActionCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).AssistantActionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_AssistantActionCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).AssistantActionCreate(ctx, req.(*AssistantActionCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_AssistantActionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistantActionDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).AssistantActionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_AssistantActionDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).AssistantActionDelete(ctx, req.(*AssistantActionDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_AssistantActionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistantActionUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).AssistantActionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_AssistantActionUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).AssistantActionUpdate(ctx, req.(*AssistantActionUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAssistantActionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantActionInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAssistantActionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAssistantActionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAssistantActionInfo(ctx, req.(*GetAssistantActionInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_AssistantActionEnableSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistantActionEnableSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).AssistantActionEnableSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_AssistantActionEnableSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).AssistantActionEnableSwitch(ctx, req.(*AssistantActionEnableSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_ConversationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).ConversationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_ConversationCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).ConversationCreate(ctx, req.(*ConversationCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_ConversationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).ConversationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_ConversationDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).ConversationDelete(ctx, req.(*ConversationDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetConversationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetConversationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetConversationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetConversationList(ctx, req.(*GetConversationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetConversationDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetConversationDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetConversationDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetConversationDetailList(ctx, req.(*GetConversationDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_AssistantConversionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssistantConversionStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssistantServiceServer).AssistantConversionStream(m, &grpc.GenericServerStream[AssistantConversionStreamReq, AssistantConversionStreamResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AssistantService_AssistantConversionStreamServer = grpc.ServerStreamingServer[AssistantConversionStreamResp]

func _AssistantService_ConversationDeleteByAssistantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationDeleteByAssistantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).ConversationDeleteByAssistantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_ConversationDeleteByAssistantId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).ConversationDeleteByAssistantId(ctx, req.(*ConversationDeleteByAssistantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AssistantService_ServiceDesc is the grpc.ServiceDesc for AssistantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssistantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assistant_service.AssistantService",
	HandlerType: (*AssistantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssistantByIds",
			Handler:    _AssistantService_GetAssistantByIds_Handler,
		},
		{
			MethodName: "AssistantCreate",
			Handler:    _AssistantService_AssistantCreate_Handler,
		},
		{
			MethodName: "AssistantUpdate",
			Handler:    _AssistantService_AssistantUpdate_Handler,
		},
		{
			MethodName: "AssistantConfigUpdate",
			Handler:    _AssistantService_AssistantConfigUpdate_Handler,
		},
		{
			MethodName: "AssistantDelete",
			Handler:    _AssistantService_AssistantDelete_Handler,
		},
		{
			MethodName: "GetAssistantListMyAll",
			Handler:    _AssistantService_GetAssistantListMyAll_Handler,
		},
		{
			MethodName: "GetAssistantInfo",
			Handler:    _AssistantService_GetAssistantInfo_Handler,
		},
		{
			MethodName: "AssistantWorkFlowCreate",
			Handler:    _AssistantService_AssistantWorkFlowCreate_Handler,
		},
		{
			MethodName: "AssistantWorkFlowDelete",
			Handler:    _AssistantService_AssistantWorkFlowDelete_Handler,
		},
		{
			MethodName: "AssistantWorkFlowEnableSwitch",
			Handler:    _AssistantService_AssistantWorkFlowEnableSwitch_Handler,
		},
		{
			MethodName: "AssistantActionCreate",
			Handler:    _AssistantService_AssistantActionCreate_Handler,
		},
		{
			MethodName: "AssistantActionDelete",
			Handler:    _AssistantService_AssistantActionDelete_Handler,
		},
		{
			MethodName: "AssistantActionUpdate",
			Handler:    _AssistantService_AssistantActionUpdate_Handler,
		},
		{
			MethodName: "GetAssistantActionInfo",
			Handler:    _AssistantService_GetAssistantActionInfo_Handler,
		},
		{
			MethodName: "AssistantActionEnableSwitch",
			Handler:    _AssistantService_AssistantActionEnableSwitch_Handler,
		},
		{
			MethodName: "ConversationCreate",
			Handler:    _AssistantService_ConversationCreate_Handler,
		},
		{
			MethodName: "ConversationDelete",
			Handler:    _AssistantService_ConversationDelete_Handler,
		},
		{
			MethodName: "GetConversationList",
			Handler:    _AssistantService_GetConversationList_Handler,
		},
		{
			MethodName: "GetConversationDetailList",
			Handler:    _AssistantService_GetConversationDetailList_Handler,
		},
		{
			MethodName: "ConversationDeleteByAssistantId",
			Handler:    _AssistantService_ConversationDeleteByAssistantId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AssistantConversionStream",
			Handler:       _AssistantService_AssistantConversionStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/assistant-service/assistant-service.proto",
}
