// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/knowledgebase-splitter-service/knowledgebase-splitter-service.proto

package knowledgebase_splitter_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KnowledgeBaseSplitterService_SelectKnowledgeSplitterList_FullMethodName = "/knowledgebase_splitter_service.KnowledgeBaseSplitterService/SelectKnowledgeSplitterList"
	KnowledgeBaseSplitterService_CreateKnowledgeSplitter_FullMethodName     = "/knowledgebase_splitter_service.KnowledgeBaseSplitterService/CreateKnowledgeSplitter"
	KnowledgeBaseSplitterService_UpdateKnowledgeSplitter_FullMethodName     = "/knowledgebase_splitter_service.KnowledgeBaseSplitterService/UpdateKnowledgeSplitter"
	KnowledgeBaseSplitterService_DeleteKnowledgeSplitter_FullMethodName     = "/knowledgebase_splitter_service.KnowledgeBaseSplitterService/DeleteKnowledgeSplitter"
)

// KnowledgeBaseSplitterServiceClient is the client API for KnowledgeBaseSplitterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnowledgeBaseSplitterServiceClient interface {
	// 获取知识库标签列表
	SelectKnowledgeSplitterList(ctx context.Context, in *KnowledgeSplitterSelectReq, opts ...grpc.CallOption) (*KnowledgeSplitterSelectListResp, error)
	// 新增知识库标签
	CreateKnowledgeSplitter(ctx context.Context, in *CreateKnowledgeSplitterReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 修改知识库标签
	UpdateKnowledgeSplitter(ctx context.Context, in *UpdateKnowledgeSplitterReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除知识库标签
	DeleteKnowledgeSplitter(ctx context.Context, in *DeleteKnowledgeSplitterReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type knowledgeBaseSplitterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeBaseSplitterServiceClient(cc grpc.ClientConnInterface) KnowledgeBaseSplitterServiceClient {
	return &knowledgeBaseSplitterServiceClient{cc}
}

func (c *knowledgeBaseSplitterServiceClient) SelectKnowledgeSplitterList(ctx context.Context, in *KnowledgeSplitterSelectReq, opts ...grpc.CallOption) (*KnowledgeSplitterSelectListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnowledgeSplitterSelectListResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseSplitterService_SelectKnowledgeSplitterList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseSplitterServiceClient) CreateKnowledgeSplitter(ctx context.Context, in *CreateKnowledgeSplitterReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseSplitterService_CreateKnowledgeSplitter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseSplitterServiceClient) UpdateKnowledgeSplitter(ctx context.Context, in *UpdateKnowledgeSplitterReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseSplitterService_UpdateKnowledgeSplitter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseSplitterServiceClient) DeleteKnowledgeSplitter(ctx context.Context, in *DeleteKnowledgeSplitterReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseSplitterService_DeleteKnowledgeSplitter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeBaseSplitterServiceServer is the server API for KnowledgeBaseSplitterService service.
// All implementations must embed UnimplementedKnowledgeBaseSplitterServiceServer
// for forward compatibility.
type KnowledgeBaseSplitterServiceServer interface {
	// 获取知识库标签列表
	SelectKnowledgeSplitterList(context.Context, *KnowledgeSplitterSelectReq) (*KnowledgeSplitterSelectListResp, error)
	// 新增知识库标签
	CreateKnowledgeSplitter(context.Context, *CreateKnowledgeSplitterReq) (*emptypb.Empty, error)
	// 修改知识库标签
	UpdateKnowledgeSplitter(context.Context, *UpdateKnowledgeSplitterReq) (*emptypb.Empty, error)
	// 删除知识库标签
	DeleteKnowledgeSplitter(context.Context, *DeleteKnowledgeSplitterReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedKnowledgeBaseSplitterServiceServer()
}

// UnimplementedKnowledgeBaseSplitterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKnowledgeBaseSplitterServiceServer struct{}

func (UnimplementedKnowledgeBaseSplitterServiceServer) SelectKnowledgeSplitterList(context.Context, *KnowledgeSplitterSelectReq) (*KnowledgeSplitterSelectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectKnowledgeSplitterList not implemented")
}
func (UnimplementedKnowledgeBaseSplitterServiceServer) CreateKnowledgeSplitter(context.Context, *CreateKnowledgeSplitterReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgeSplitter not implemented")
}
func (UnimplementedKnowledgeBaseSplitterServiceServer) UpdateKnowledgeSplitter(context.Context, *UpdateKnowledgeSplitterReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledgeSplitter not implemented")
}
func (UnimplementedKnowledgeBaseSplitterServiceServer) DeleteKnowledgeSplitter(context.Context, *DeleteKnowledgeSplitterReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKnowledgeSplitter not implemented")
}
func (UnimplementedKnowledgeBaseSplitterServiceServer) mustEmbedUnimplementedKnowledgeBaseSplitterServiceServer() {
}
func (UnimplementedKnowledgeBaseSplitterServiceServer) testEmbeddedByValue() {}

// UnsafeKnowledgeBaseSplitterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnowledgeBaseSplitterServiceServer will
// result in compilation errors.
type UnsafeKnowledgeBaseSplitterServiceServer interface {
	mustEmbedUnimplementedKnowledgeBaseSplitterServiceServer()
}

func RegisterKnowledgeBaseSplitterServiceServer(s grpc.ServiceRegistrar, srv KnowledgeBaseSplitterServiceServer) {
	// If the following call pancis, it indicates UnimplementedKnowledgeBaseSplitterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KnowledgeBaseSplitterService_ServiceDesc, srv)
}

func _KnowledgeBaseSplitterService_SelectKnowledgeSplitterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeSplitterSelectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseSplitterServiceServer).SelectKnowledgeSplitterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseSplitterService_SelectKnowledgeSplitterList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseSplitterServiceServer).SelectKnowledgeSplitterList(ctx, req.(*KnowledgeSplitterSelectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseSplitterService_CreateKnowledgeSplitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgeSplitterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseSplitterServiceServer).CreateKnowledgeSplitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseSplitterService_CreateKnowledgeSplitter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseSplitterServiceServer).CreateKnowledgeSplitter(ctx, req.(*CreateKnowledgeSplitterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseSplitterService_UpdateKnowledgeSplitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKnowledgeSplitterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseSplitterServiceServer).UpdateKnowledgeSplitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseSplitterService_UpdateKnowledgeSplitter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseSplitterServiceServer).UpdateKnowledgeSplitter(ctx, req.(*UpdateKnowledgeSplitterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseSplitterService_DeleteKnowledgeSplitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKnowledgeSplitterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseSplitterServiceServer).DeleteKnowledgeSplitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseSplitterService_DeleteKnowledgeSplitter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseSplitterServiceServer).DeleteKnowledgeSplitter(ctx, req.(*DeleteKnowledgeSplitterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// KnowledgeBaseSplitterService_ServiceDesc is the grpc.ServiceDesc for KnowledgeBaseSplitterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KnowledgeBaseSplitterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knowledgebase_splitter_service.KnowledgeBaseSplitterService",
	HandlerType: (*KnowledgeBaseSplitterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectKnowledgeSplitterList",
			Handler:    _KnowledgeBaseSplitterService_SelectKnowledgeSplitterList_Handler,
		},
		{
			MethodName: "CreateKnowledgeSplitter",
			Handler:    _KnowledgeBaseSplitterService_CreateKnowledgeSplitter_Handler,
		},
		{
			MethodName: "UpdateKnowledgeSplitter",
			Handler:    _KnowledgeBaseSplitterService_UpdateKnowledgeSplitter_Handler,
		},
		{
			MethodName: "DeleteKnowledgeSplitter",
			Handler:    _KnowledgeBaseSplitterService_DeleteKnowledgeSplitter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/knowledgebase-splitter-service/knowledgebase-splitter-service.proto",
}
