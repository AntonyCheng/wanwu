// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/safety-service/safety-service.proto

package safety_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SafetyService_CreateSensitiveWordTable_FullMethodName                = "/safety_service.SafetyService/CreateSensitiveWordTable"
	SafetyService_UpdateSensitiveWordTable_FullMethodName                = "/safety_service.SafetyService/UpdateSensitiveWordTable"
	SafetyService_UpdateSensitiveWordTableReply_FullMethodName           = "/safety_service.SafetyService/UpdateSensitiveWordTableReply"
	SafetyService_DeleteSensitiveWordTable_FullMethodName                = "/safety_service.SafetyService/DeleteSensitiveWordTable"
	SafetyService_GetSensitiveWordTableList_FullMethodName               = "/safety_service.SafetyService/GetSensitiveWordTableList"
	SafetyService_GetSensitiveWordTableListByIDs_FullMethodName          = "/safety_service.SafetyService/GetSensitiveWordTableListByIDs"
	SafetyService_GetSensitiveWordTableByID_FullMethodName               = "/safety_service.SafetyService/GetSensitiveWordTableByID"
	SafetyService_UploadSensitiveVocabulary_FullMethodName               = "/safety_service.SafetyService/UploadSensitiveVocabulary"
	SafetyService_DeleteSensitiveVocabulary_FullMethodName               = "/safety_service.SafetyService/DeleteSensitiveVocabulary"
	SafetyService_GetSensitiveVocabularyList_FullMethodName              = "/safety_service.SafetyService/GetSensitiveVocabularyList"
	SafetyService_GetSensitiveWordTableListWithWordsByIDs_FullMethodName = "/safety_service.SafetyService/GetSensitiveWordTableListWithWordsByIDs"
)

// SafetyServiceClient is the client API for SafetyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SafetyServiceClient interface {
	// --- safety ---
	// 敏感词表相关
	// 创建敏感词表
	CreateSensitiveWordTable(ctx context.Context, in *CreateSensitiveWordTableReq, opts ...grpc.CallOption) (*CreateSensitiveWordTableResp, error)
	// 编辑敏感词表
	UpdateSensitiveWordTable(ctx context.Context, in *UpdateSensitiveWordTableReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 编辑敏感词表回复设置
	UpdateSensitiveWordTableReply(ctx context.Context, in *UpdateSensitiveWordTableReplyReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除敏感词表
	DeleteSensitiveWordTable(ctx context.Context, in *DeleteSensitiveWordTableReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取敏感词表列表
	GetSensitiveWordTableList(ctx context.Context, in *GetSensitiveWordTableListReq, opts ...grpc.CallOption) (*SensitiveWordTables, error)
	// 通过敏感词表id列表获取敏感词表信息
	GetSensitiveWordTableListByIDs(ctx context.Context, in *GetSensitiveWordTableListByIDsReq, opts ...grpc.CallOption) (*SensitiveWordTables, error)
	// 通过敏感词表id获取敏感词表信息
	GetSensitiveWordTableByID(ctx context.Context, in *GetSensitiveWordTableByIDReq, opts ...grpc.CallOption) (*SensitiveWordTable, error)
	// 敏感词相关
	// 上传敏感词
	UploadSensitiveVocabulary(ctx context.Context, in *UploadSensitiveVocabularyReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除敏感词
	DeleteSensitiveVocabulary(ctx context.Context, in *DeleteSensitiveVocabularyReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取敏感词列表
	GetSensitiveVocabularyList(ctx context.Context, in *GetSensitiveVocabularyListReq, opts ...grpc.CallOption) (*SensitiveWordVocabularyResp, error)
	// 获取多个敏感词表详细数据(带敏感词)
	GetSensitiveWordTableListWithWordsByIDs(ctx context.Context, in *GetSensitiveWordTableListByIDsReq, opts ...grpc.CallOption) (*SensitiveWordTableListWithWords, error)
}

type safetyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSafetyServiceClient(cc grpc.ClientConnInterface) SafetyServiceClient {
	return &safetyServiceClient{cc}
}

func (c *safetyServiceClient) CreateSensitiveWordTable(ctx context.Context, in *CreateSensitiveWordTableReq, opts ...grpc.CallOption) (*CreateSensitiveWordTableResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSensitiveWordTableResp)
	err := c.cc.Invoke(ctx, SafetyService_CreateSensitiveWordTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safetyServiceClient) UpdateSensitiveWordTable(ctx context.Context, in *UpdateSensitiveWordTableReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SafetyService_UpdateSensitiveWordTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safetyServiceClient) UpdateSensitiveWordTableReply(ctx context.Context, in *UpdateSensitiveWordTableReplyReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SafetyService_UpdateSensitiveWordTableReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safetyServiceClient) DeleteSensitiveWordTable(ctx context.Context, in *DeleteSensitiveWordTableReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SafetyService_DeleteSensitiveWordTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safetyServiceClient) GetSensitiveWordTableList(ctx context.Context, in *GetSensitiveWordTableListReq, opts ...grpc.CallOption) (*SensitiveWordTables, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensitiveWordTables)
	err := c.cc.Invoke(ctx, SafetyService_GetSensitiveWordTableList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safetyServiceClient) GetSensitiveWordTableListByIDs(ctx context.Context, in *GetSensitiveWordTableListByIDsReq, opts ...grpc.CallOption) (*SensitiveWordTables, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensitiveWordTables)
	err := c.cc.Invoke(ctx, SafetyService_GetSensitiveWordTableListByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safetyServiceClient) GetSensitiveWordTableByID(ctx context.Context, in *GetSensitiveWordTableByIDReq, opts ...grpc.CallOption) (*SensitiveWordTable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensitiveWordTable)
	err := c.cc.Invoke(ctx, SafetyService_GetSensitiveWordTableByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safetyServiceClient) UploadSensitiveVocabulary(ctx context.Context, in *UploadSensitiveVocabularyReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SafetyService_UploadSensitiveVocabulary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safetyServiceClient) DeleteSensitiveVocabulary(ctx context.Context, in *DeleteSensitiveVocabularyReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SafetyService_DeleteSensitiveVocabulary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safetyServiceClient) GetSensitiveVocabularyList(ctx context.Context, in *GetSensitiveVocabularyListReq, opts ...grpc.CallOption) (*SensitiveWordVocabularyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensitiveWordVocabularyResp)
	err := c.cc.Invoke(ctx, SafetyService_GetSensitiveVocabularyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safetyServiceClient) GetSensitiveWordTableListWithWordsByIDs(ctx context.Context, in *GetSensitiveWordTableListByIDsReq, opts ...grpc.CallOption) (*SensitiveWordTableListWithWords, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensitiveWordTableListWithWords)
	err := c.cc.Invoke(ctx, SafetyService_GetSensitiveWordTableListWithWordsByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SafetyServiceServer is the server API for SafetyService service.
// All implementations must embed UnimplementedSafetyServiceServer
// for forward compatibility.
type SafetyServiceServer interface {
	// --- safety ---
	// 敏感词表相关
	// 创建敏感词表
	CreateSensitiveWordTable(context.Context, *CreateSensitiveWordTableReq) (*CreateSensitiveWordTableResp, error)
	// 编辑敏感词表
	UpdateSensitiveWordTable(context.Context, *UpdateSensitiveWordTableReq) (*emptypb.Empty, error)
	// 编辑敏感词表回复设置
	UpdateSensitiveWordTableReply(context.Context, *UpdateSensitiveWordTableReplyReq) (*emptypb.Empty, error)
	// 删除敏感词表
	DeleteSensitiveWordTable(context.Context, *DeleteSensitiveWordTableReq) (*emptypb.Empty, error)
	// 获取敏感词表列表
	GetSensitiveWordTableList(context.Context, *GetSensitiveWordTableListReq) (*SensitiveWordTables, error)
	// 通过敏感词表id列表获取敏感词表信息
	GetSensitiveWordTableListByIDs(context.Context, *GetSensitiveWordTableListByIDsReq) (*SensitiveWordTables, error)
	// 通过敏感词表id获取敏感词表信息
	GetSensitiveWordTableByID(context.Context, *GetSensitiveWordTableByIDReq) (*SensitiveWordTable, error)
	// 敏感词相关
	// 上传敏感词
	UploadSensitiveVocabulary(context.Context, *UploadSensitiveVocabularyReq) (*emptypb.Empty, error)
	// 删除敏感词
	DeleteSensitiveVocabulary(context.Context, *DeleteSensitiveVocabularyReq) (*emptypb.Empty, error)
	// 获取敏感词列表
	GetSensitiveVocabularyList(context.Context, *GetSensitiveVocabularyListReq) (*SensitiveWordVocabularyResp, error)
	// 获取多个敏感词表详细数据(带敏感词)
	GetSensitiveWordTableListWithWordsByIDs(context.Context, *GetSensitiveWordTableListByIDsReq) (*SensitiveWordTableListWithWords, error)
	mustEmbedUnimplementedSafetyServiceServer()
}

// UnimplementedSafetyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSafetyServiceServer struct{}

func (UnimplementedSafetyServiceServer) CreateSensitiveWordTable(context.Context, *CreateSensitiveWordTableReq) (*CreateSensitiveWordTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSensitiveWordTable not implemented")
}
func (UnimplementedSafetyServiceServer) UpdateSensitiveWordTable(context.Context, *UpdateSensitiveWordTableReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSensitiveWordTable not implemented")
}
func (UnimplementedSafetyServiceServer) UpdateSensitiveWordTableReply(context.Context, *UpdateSensitiveWordTableReplyReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSensitiveWordTableReply not implemented")
}
func (UnimplementedSafetyServiceServer) DeleteSensitiveWordTable(context.Context, *DeleteSensitiveWordTableReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSensitiveWordTable not implemented")
}
func (UnimplementedSafetyServiceServer) GetSensitiveWordTableList(context.Context, *GetSensitiveWordTableListReq) (*SensitiveWordTables, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensitiveWordTableList not implemented")
}
func (UnimplementedSafetyServiceServer) GetSensitiveWordTableListByIDs(context.Context, *GetSensitiveWordTableListByIDsReq) (*SensitiveWordTables, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensitiveWordTableListByIDs not implemented")
}
func (UnimplementedSafetyServiceServer) GetSensitiveWordTableByID(context.Context, *GetSensitiveWordTableByIDReq) (*SensitiveWordTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensitiveWordTableByID not implemented")
}
func (UnimplementedSafetyServiceServer) UploadSensitiveVocabulary(context.Context, *UploadSensitiveVocabularyReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSensitiveVocabulary not implemented")
}
func (UnimplementedSafetyServiceServer) DeleteSensitiveVocabulary(context.Context, *DeleteSensitiveVocabularyReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSensitiveVocabulary not implemented")
}
func (UnimplementedSafetyServiceServer) GetSensitiveVocabularyList(context.Context, *GetSensitiveVocabularyListReq) (*SensitiveWordVocabularyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensitiveVocabularyList not implemented")
}
func (UnimplementedSafetyServiceServer) GetSensitiveWordTableListWithWordsByIDs(context.Context, *GetSensitiveWordTableListByIDsReq) (*SensitiveWordTableListWithWords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensitiveWordTableListWithWordsByIDs not implemented")
}
func (UnimplementedSafetyServiceServer) mustEmbedUnimplementedSafetyServiceServer() {}
func (UnimplementedSafetyServiceServer) testEmbeddedByValue()                       {}

// UnsafeSafetyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SafetyServiceServer will
// result in compilation errors.
type UnsafeSafetyServiceServer interface {
	mustEmbedUnimplementedSafetyServiceServer()
}

func RegisterSafetyServiceServer(s grpc.ServiceRegistrar, srv SafetyServiceServer) {
	// If the following call pancis, it indicates UnimplementedSafetyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SafetyService_ServiceDesc, srv)
}

func _SafetyService_CreateSensitiveWordTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSensitiveWordTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).CreateSensitiveWordTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_CreateSensitiveWordTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).CreateSensitiveWordTable(ctx, req.(*CreateSensitiveWordTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafetyService_UpdateSensitiveWordTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSensitiveWordTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).UpdateSensitiveWordTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_UpdateSensitiveWordTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).UpdateSensitiveWordTable(ctx, req.(*UpdateSensitiveWordTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafetyService_UpdateSensitiveWordTableReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSensitiveWordTableReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).UpdateSensitiveWordTableReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_UpdateSensitiveWordTableReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).UpdateSensitiveWordTableReply(ctx, req.(*UpdateSensitiveWordTableReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafetyService_DeleteSensitiveWordTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSensitiveWordTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).DeleteSensitiveWordTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_DeleteSensitiveWordTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).DeleteSensitiveWordTable(ctx, req.(*DeleteSensitiveWordTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafetyService_GetSensitiveWordTableList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSensitiveWordTableListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).GetSensitiveWordTableList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_GetSensitiveWordTableList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).GetSensitiveWordTableList(ctx, req.(*GetSensitiveWordTableListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafetyService_GetSensitiveWordTableListByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSensitiveWordTableListByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).GetSensitiveWordTableListByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_GetSensitiveWordTableListByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).GetSensitiveWordTableListByIDs(ctx, req.(*GetSensitiveWordTableListByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafetyService_GetSensitiveWordTableByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSensitiveWordTableByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).GetSensitiveWordTableByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_GetSensitiveWordTableByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).GetSensitiveWordTableByID(ctx, req.(*GetSensitiveWordTableByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafetyService_UploadSensitiveVocabulary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSensitiveVocabularyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).UploadSensitiveVocabulary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_UploadSensitiveVocabulary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).UploadSensitiveVocabulary(ctx, req.(*UploadSensitiveVocabularyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafetyService_DeleteSensitiveVocabulary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSensitiveVocabularyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).DeleteSensitiveVocabulary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_DeleteSensitiveVocabulary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).DeleteSensitiveVocabulary(ctx, req.(*DeleteSensitiveVocabularyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafetyService_GetSensitiveVocabularyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSensitiveVocabularyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).GetSensitiveVocabularyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_GetSensitiveVocabularyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).GetSensitiveVocabularyList(ctx, req.(*GetSensitiveVocabularyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafetyService_GetSensitiveWordTableListWithWordsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSensitiveWordTableListByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).GetSensitiveWordTableListWithWordsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_GetSensitiveWordTableListWithWordsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).GetSensitiveWordTableListWithWordsByIDs(ctx, req.(*GetSensitiveWordTableListByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SafetyService_ServiceDesc is the grpc.ServiceDesc for SafetyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SafetyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "safety_service.SafetyService",
	HandlerType: (*SafetyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSensitiveWordTable",
			Handler:    _SafetyService_CreateSensitiveWordTable_Handler,
		},
		{
			MethodName: "UpdateSensitiveWordTable",
			Handler:    _SafetyService_UpdateSensitiveWordTable_Handler,
		},
		{
			MethodName: "UpdateSensitiveWordTableReply",
			Handler:    _SafetyService_UpdateSensitiveWordTableReply_Handler,
		},
		{
			MethodName: "DeleteSensitiveWordTable",
			Handler:    _SafetyService_DeleteSensitiveWordTable_Handler,
		},
		{
			MethodName: "GetSensitiveWordTableList",
			Handler:    _SafetyService_GetSensitiveWordTableList_Handler,
		},
		{
			MethodName: "GetSensitiveWordTableListByIDs",
			Handler:    _SafetyService_GetSensitiveWordTableListByIDs_Handler,
		},
		{
			MethodName: "GetSensitiveWordTableByID",
			Handler:    _SafetyService_GetSensitiveWordTableByID_Handler,
		},
		{
			MethodName: "UploadSensitiveVocabulary",
			Handler:    _SafetyService_UploadSensitiveVocabulary_Handler,
		},
		{
			MethodName: "DeleteSensitiveVocabulary",
			Handler:    _SafetyService_DeleteSensitiveVocabulary_Handler,
		},
		{
			MethodName: "GetSensitiveVocabularyList",
			Handler:    _SafetyService_GetSensitiveVocabularyList_Handler,
		},
		{
			MethodName: "GetSensitiveWordTableListWithWordsByIDs",
			Handler:    _SafetyService_GetSensitiveWordTableListWithWordsByIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/safety-service/safety-service.proto",
}
