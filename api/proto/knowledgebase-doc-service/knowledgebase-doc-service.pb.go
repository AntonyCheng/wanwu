// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.29.4
// source: proto/knowledgebase-doc-service/knowledgebase-doc-service.proto

package knowledgebase_doc_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDocListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnowledgeId string `protobuf:"bytes,1,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`
	DocName     string `protobuf:"bytes,2,opt,name=docName,proto3" json:"docName,omitempty"`
	Status      int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	PageSize    int32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNum     int32  `protobuf:"varint,5,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	UserId      string `protobuf:"bytes,6,opt,name=userId,proto3" json:"userId,omitempty"`
	OrgId       string `protobuf:"bytes,7,opt,name=orgId,proto3" json:"orgId,omitempty"`
	DocTag      string `protobuf:"bytes,8,opt,name=docTag,proto3" json:"docTag,omitempty"` //文档标签
}

func (x *GetDocListReq) Reset() {
	*x = GetDocListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocListReq) ProtoMessage() {}

func (x *GetDocListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocListReq.ProtoReflect.Descriptor instead.
func (*GetDocListReq) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetDocListReq) GetKnowledgeId() string {
	if x != nil {
		return x.KnowledgeId
	}
	return ""
}

func (x *GetDocListReq) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *GetDocListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetDocListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetDocListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetDocListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetDocListReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetDocListReq) GetDocTag() string {
	if x != nil {
		return x.DocTag
	}
	return ""
}

type GetDocListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docs     []*DocInfo `protobuf:"bytes,1,rep,name=docs,proto3" json:"docs,omitempty"`
	Total    int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	PageNum  int32      `protobuf:"varint,3,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize int32      `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *GetDocListResp) Reset() {
	*x = GetDocListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocListResp) ProtoMessage() {}

func (x *GetDocListResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocListResp.ProtoReflect.Descriptor instead.
func (*GetDocListResp) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetDocListResp) GetDocs() []*DocInfo {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *GetDocListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetDocListResp) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetDocListResp) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ImportDocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string         `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OrgId         string         `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	KnowledgeId   string         `protobuf:"bytes,3,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`      //知识库id
	DocImportType int32          `protobuf:"varint,4,opt,name=docImportType,proto3" json:"docImportType,omitempty"` //文档导入类型，0：文件上传，1：url上传，2.批量url上传
	DocInfoList   []*DocFileInfo `protobuf:"bytes,5,rep,name=docInfoList,proto3" json:"docInfoList,omitempty"`      //上传文档列表
	DocSegment    *DocSegment    `protobuf:"bytes,6,opt,name=docSegment,proto3" json:"docSegment,omitempty"`        //分段信息配置
	DocAnalyzer   []string       `protobuf:"bytes,7,rep,name=docAnalyzer,proto3" json:"docAnalyzer,omitempty"`      //文档解析类型
	OcrModelId    string         `protobuf:"bytes,8,opt,name=ocrModelId,proto3" json:"ocrModelId,omitempty"`        //ocr模型id
}

func (x *ImportDocReq) Reset() {
	*x = ImportDocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDocReq) ProtoMessage() {}

func (x *ImportDocReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDocReq.ProtoReflect.Descriptor instead.
func (*ImportDocReq) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{2}
}

func (x *ImportDocReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ImportDocReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ImportDocReq) GetKnowledgeId() string {
	if x != nil {
		return x.KnowledgeId
	}
	return ""
}

func (x *ImportDocReq) GetDocImportType() int32 {
	if x != nil {
		return x.DocImportType
	}
	return 0
}

func (x *ImportDocReq) GetDocInfoList() []*DocFileInfo {
	if x != nil {
		return x.DocInfoList
	}
	return nil
}

func (x *ImportDocReq) GetDocSegment() *DocSegment {
	if x != nil {
		return x.DocSegment
	}
	return nil
}

func (x *ImportDocReq) GetDocAnalyzer() []string {
	if x != nil {
		return x.DocAnalyzer
	}
	return nil
}

func (x *ImportDocReq) GetOcrModelId() string {
	if x != nil {
		return x.OcrModelId
	}
	return ""
}

type UpdateDocStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId        string      `protobuf:"bytes,1,opt,name=docId,proto3" json:"docId,omitempty"`               //文档id
	Status       int32       `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`            //文档状态
	MetaDataList []*MetaData `protobuf:"bytes,3,rep,name=metaDataList,proto3" json:"metaDataList,omitempty"` //文档元数据信息
}

func (x *UpdateDocStatusReq) Reset() {
	*x = UpdateDocStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDocStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDocStatusReq) ProtoMessage() {}

func (x *UpdateDocStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDocStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateDocStatusReq) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateDocStatusReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *UpdateDocStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateDocStatusReq) GetMetaDataList() []*MetaData {
	if x != nil {
		return x.MetaDataList
	}
	return nil
}

type UpdateDocMetaDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId        string      `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	UserId       string      `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	DocId        string      `protobuf:"bytes,3,opt,name=docId,proto3" json:"docId,omitempty"`               //文档id
	MetaDataList []*MetaData `protobuf:"bytes,4,rep,name=metaDataList,proto3" json:"metaDataList,omitempty"` //文档元数据信息
}

func (x *UpdateDocMetaDataReq) Reset() {
	*x = UpdateDocMetaDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDocMetaDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDocMetaDataReq) ProtoMessage() {}

func (x *UpdateDocMetaDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDocMetaDataReq.ProtoReflect.Descriptor instead.
func (*UpdateDocMetaDataReq) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateDocMetaDataReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UpdateDocMetaDataReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateDocMetaDataReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *UpdateDocMetaDataReq) GetMetaDataList() []*MetaData {
	if x != nil {
		return x.MetaDataList
	}
	return nil
}

type MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataId string `protobuf:"bytes,1,opt,name=dataId,proto3" json:"dataId,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

func (x *MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{5}
}

func (x *MetaData) GetDataId() string {
	if x != nil {
		return x.DataId
	}
	return ""
}

func (x *MetaData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MetaData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type InitDocStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
}

func (x *InitDocStatusReq) Reset() {
	*x = InitDocStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitDocStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitDocStatusReq) ProtoMessage() {}

func (x *InitDocStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitDocStatusReq.ProtoReflect.Descriptor instead.
func (*InitDocStatusReq) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{6}
}

func (x *InitDocStatusReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *InitDocStatusReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type DeleteDocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	UserId string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	OrgId  string   `protobuf:"bytes,3,opt,name=orgId,proto3" json:"orgId,omitempty"`
}

func (x *DeleteDocReq) Reset() {
	*x = DeleteDocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDocReq) ProtoMessage() {}

func (x *DeleteDocReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDocReq.ProtoReflect.Descriptor instead.
func (*DeleteDocReq) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDocReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteDocReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteDocReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type DocFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocName string `protobuf:"bytes,1,opt,name=docName,proto3" json:"docName,omitempty"`  //文档名称
	DocUrl  string `protobuf:"bytes,2,opt,name=docUrl,proto3" json:"docUrl,omitempty"`    //文档url
	DocType string `protobuf:"bytes,3,opt,name=docType,proto3" json:"docType,omitempty"`  // 文档类型
	DocId   string `protobuf:"bytes,4,opt,name=docId,proto3" json:"docId,omitempty"`      //文档id
	DocSize int64  `protobuf:"varint,5,opt,name=docSize,proto3" json:"docSize,omitempty"` //文档大小
}

func (x *DocFileInfo) Reset() {
	*x = DocFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocFileInfo) ProtoMessage() {}

func (x *DocFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocFileInfo.ProtoReflect.Descriptor instead.
func (*DocFileInfo) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{8}
}

func (x *DocFileInfo) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *DocFileInfo) GetDocUrl() string {
	if x != nil {
		return x.DocUrl
	}
	return ""
}

func (x *DocFileInfo) GetDocType() string {
	if x != nil {
		return x.DocType
	}
	return ""
}

func (x *DocFileInfo) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *DocFileInfo) GetDocSize() int64 {
	if x != nil {
		return x.DocSize
	}
	return 0
}

type DocSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentType string   `protobuf:"bytes,1,opt,name=SegmentType,proto3" json:"SegmentType,omitempty"`  //分段方式 0：自定分段；1：自定义分段
	Splitter    []string `protobuf:"bytes,2,rep,name=Splitter,proto3" json:"Splitter,omitempty"`        // 分隔符（只有自定义分段必填）
	MaxSplitter int32    `protobuf:"varint,3,opt,name=MaxSplitter,proto3" json:"MaxSplitter,omitempty"` // 可分隔最大值（只有自定义分段必填）
	Overlap     float32  `protobuf:"fixed32,4,opt,name=Overlap,proto3" json:"Overlap,omitempty"`        // 可重叠值（只有自定义分段必填）
}

func (x *DocSegment) Reset() {
	*x = DocSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocSegment) ProtoMessage() {}

func (x *DocSegment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocSegment.ProtoReflect.Descriptor instead.
func (*DocSegment) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{9}
}

func (x *DocSegment) GetSegmentType() string {
	if x != nil {
		return x.SegmentType
	}
	return ""
}

func (x *DocSegment) GetSplitter() []string {
	if x != nil {
		return x.Splitter
	}
	return nil
}

func (x *DocSegment) GetMaxSplitter() int32 {
	if x != nil {
		return x.MaxSplitter
	}
	return 0
}

func (x *DocSegment) GetOverlap() float32 {
	if x != nil {
		return x.Overlap
	}
	return 0
}

type DocImportTipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OrgId       string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	KnowledgeId string `protobuf:"bytes,3,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`
}

func (x *DocImportTipReq) Reset() {
	*x = DocImportTipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocImportTipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocImportTipReq) ProtoMessage() {}

func (x *DocImportTipReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocImportTipReq.ProtoReflect.Descriptor instead.
func (*DocImportTipReq) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{10}
}

func (x *DocImportTipReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DocImportTipReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *DocImportTipReq) GetKnowledgeId() string {
	if x != nil {
		return x.KnowledgeId
	}
	return ""
}

type DocImportTipResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnowledgeName string `protobuf:"bytes,1,opt,name=knowledgeName,proto3" json:"knowledgeName,omitempty"`
	KnowledgeId   string `protobuf:"bytes,2,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`
	Message       string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	UploadStatus  int32  `protobuf:"varint,4,opt,name=uploadStatus,proto3" json:"uploadStatus,omitempty"`
}

func (x *DocImportTipResp) Reset() {
	*x = DocImportTipResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocImportTipResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocImportTipResp) ProtoMessage() {}

func (x *DocImportTipResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocImportTipResp.ProtoReflect.Descriptor instead.
func (*DocImportTipResp) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{11}
}

func (x *DocImportTipResp) GetKnowledgeName() string {
	if x != nil {
		return x.KnowledgeName
	}
	return ""
}

func (x *DocImportTipResp) GetKnowledgeId() string {
	if x != nil {
		return x.KnowledgeId
	}
	return ""
}

func (x *DocImportTipResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DocImportTipResp) GetUploadStatus() int32 {
	if x != nil {
		return x.UploadStatus
	}
	return 0
}

type DocSegmentListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName        string            `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ContentList     []*SegmentContent `protobuf:"bytes,2,rep,name=contentList,proto3" json:"contentList,omitempty"`
	PageTotal       int32             `protobuf:"varint,3,opt,name=pageTotal,proto3" json:"pageTotal,omitempty"`
	SegmentTotalNum int32             `protobuf:"varint,4,opt,name=segmentTotalNum,proto3" json:"segmentTotalNum,omitempty"`
	MaxSegmentSize  int32             `protobuf:"varint,5,opt,name=maxSegmentSize,proto3" json:"maxSegmentSize,omitempty"`
	CreatedAt       string            `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SegType         string            `protobuf:"bytes,7,opt,name=segType,proto3" json:"segType,omitempty"`
	Splitter        string            `protobuf:"bytes,8,opt,name=splitter,proto3" json:"splitter,omitempty"`
	MetaDataList    []*MetaData       `protobuf:"bytes,9,rep,name=metaDataList,proto3" json:"metaDataList,omitempty"` //文档元数据信息
}

func (x *DocSegmentListResp) Reset() {
	*x = DocSegmentListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocSegmentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocSegmentListResp) ProtoMessage() {}

func (x *DocSegmentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocSegmentListResp.ProtoReflect.Descriptor instead.
func (*DocSegmentListResp) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{12}
}

func (x *DocSegmentListResp) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DocSegmentListResp) GetContentList() []*SegmentContent {
	if x != nil {
		return x.ContentList
	}
	return nil
}

func (x *DocSegmentListResp) GetPageTotal() int32 {
	if x != nil {
		return x.PageTotal
	}
	return 0
}

func (x *DocSegmentListResp) GetSegmentTotalNum() int32 {
	if x != nil {
		return x.SegmentTotalNum
	}
	return 0
}

func (x *DocSegmentListResp) GetMaxSegmentSize() int32 {
	if x != nil {
		return x.MaxSegmentSize
	}
	return 0
}

func (x *DocSegmentListResp) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DocSegmentListResp) GetSegType() string {
	if x != nil {
		return x.SegType
	}
	return ""
}

func (x *DocSegmentListResp) GetSplitter() string {
	if x != nil {
		return x.Splitter
	}
	return ""
}

func (x *DocSegmentListResp) GetMetaDataList() []*MetaData {
	if x != nil {
		return x.MetaDataList
	}
	return nil
}

type SegmentContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content    string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Len        int32  `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	Available  bool   `protobuf:"varint,3,opt,name=available,proto3" json:"available,omitempty"`
	ContentId  string `protobuf:"bytes,4,opt,name=contentId,proto3" json:"contentId,omitempty"`
	ContentNum int32  `protobuf:"varint,5,opt,name=contentNum,proto3" json:"contentNum,omitempty"`
}

func (x *SegmentContent) Reset() {
	*x = SegmentContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentContent) ProtoMessage() {}

func (x *SegmentContent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentContent.ProtoReflect.Descriptor instead.
func (*SegmentContent) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{13}
}

func (x *SegmentContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SegmentContent) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *SegmentContent) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *SegmentContent) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *SegmentContent) GetContentNum() int32 {
	if x != nil {
		return x.ContentNum
	}
	return 0
}

type DocInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId       string `protobuf:"bytes,1,opt,name=docId,proto3" json:"docId,omitempty"`
	DocName     string `protobuf:"bytes,2,opt,name=docName,proto3" json:"docName,omitempty"`
	DocSize     int64  `protobuf:"varint,3,opt,name=docSize,proto3" json:"docSize,omitempty"`
	DocType     string `protobuf:"bytes,4,opt,name=docType,proto3" json:"docType,omitempty"` //文档名称
	KnowledgeId string `protobuf:"bytes,5,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`
	UploadTime  string `protobuf:"bytes,6,opt,name=uploadTime,proto3" json:"uploadTime,omitempty"`
	Status      int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	ErrorMsg    string `protobuf:"bytes,8,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (x *DocInfo) Reset() {
	*x = DocInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocInfo) ProtoMessage() {}

func (x *DocInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocInfo.ProtoReflect.Descriptor instead.
func (*DocInfo) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{14}
}

func (x *DocInfo) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *DocInfo) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *DocInfo) GetDocSize() int64 {
	if x != nil {
		return x.DocSize
	}
	return 0
}

func (x *DocInfo) GetDocType() string {
	if x != nil {
		return x.DocType
	}
	return ""
}

func (x *DocInfo) GetKnowledgeId() string {
	if x != nil {
		return x.KnowledgeId
	}
	return ""
}

func (x *DocInfo) GetUploadTime() string {
	if x != nil {
		return x.UploadTime
	}
	return ""
}

func (x *DocInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DocInfo) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type DocSegmentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OrgId    string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	DocId    string `protobuf:"bytes,3,opt,name=docId,proto3" json:"docId,omitempty"`
	PageSize int32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNo   int32  `protobuf:"varint,5,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
}

func (x *DocSegmentListReq) Reset() {
	*x = DocSegmentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocSegmentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocSegmentListReq) ProtoMessage() {}

func (x *DocSegmentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocSegmentListReq.ProtoReflect.Descriptor instead.
func (*DocSegmentListReq) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{15}
}

func (x *DocSegmentListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DocSegmentListReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *DocSegmentListReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *DocSegmentListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DocSegmentListReq) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

type UpdateDocSegmentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	DocId         string `protobuf:"bytes,3,opt,name=docId,proto3" json:"docId,omitempty"`
	ContentId     string `protobuf:"bytes,4,opt,name=contentId,proto3" json:"contentId,omitempty"`
	ContentStatus string `protobuf:"bytes,5,opt,name=contentStatus,proto3" json:"contentStatus,omitempty"`
	All           bool   `protobuf:"varint,6,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *UpdateDocSegmentReq) Reset() {
	*x = UpdateDocSegmentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDocSegmentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDocSegmentReq) ProtoMessage() {}

func (x *UpdateDocSegmentReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDocSegmentReq.ProtoReflect.Descriptor instead.
func (*UpdateDocSegmentReq) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateDocSegmentReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateDocSegmentReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UpdateDocSegmentReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *UpdateDocSegmentReq) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *UpdateDocSegmentReq) GetContentStatus() string {
	if x != nil {
		return x.ContentStatus
	}
	return ""
}

func (x *UpdateDocSegmentReq) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type AnalysisUrlDocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OrgId       string   `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	KnowledgeId string   `protobuf:"bytes,3,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`
	UrlList     []string `protobuf:"bytes,4,rep,name=urlList,proto3" json:"urlList,omitempty"`
}

func (x *AnalysisUrlDocReq) Reset() {
	*x = AnalysisUrlDocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisUrlDocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisUrlDocReq) ProtoMessage() {}

func (x *AnalysisUrlDocReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisUrlDocReq.ProtoReflect.Descriptor instead.
func (*AnalysisUrlDocReq) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{17}
}

func (x *AnalysisUrlDocReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnalysisUrlDocReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AnalysisUrlDocReq) GetKnowledgeId() string {
	if x != nil {
		return x.KnowledgeId
	}
	return ""
}

func (x *AnalysisUrlDocReq) GetUrlList() []string {
	if x != nil {
		return x.UrlList
	}
	return nil
}

type AnalysisUrlDocResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrlList []*UrlInfo `protobuf:"bytes,1,rep,name=urlList,proto3" json:"urlList,omitempty"`
}

func (x *AnalysisUrlDocResp) Reset() {
	*x = AnalysisUrlDocResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisUrlDocResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisUrlDocResp) ProtoMessage() {}

func (x *AnalysisUrlDocResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisUrlDocResp.ProtoReflect.Descriptor instead.
func (*AnalysisUrlDocResp) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{18}
}

func (x *AnalysisUrlDocResp) GetUrlList() []*UrlInfo {
	if x != nil {
		return x.UrlList
	}
	return nil
}

type UrlInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	FileName string  `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileSize float64 `protobuf:"fixed64,3,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
}

func (x *UrlInfo) Reset() {
	*x = UrlInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlInfo) ProtoMessage() {}

func (x *UrlInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlInfo.ProtoReflect.Descriptor instead.
func (*UrlInfo) Descriptor() ([]byte, []int) {
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP(), []int{19}
}

func (x *UrlInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UrlInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UrlInfo) GetFileSize() float64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

var File_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto protoreflect.FileDescriptor

var file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x64, 0x6f, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2d,
	0x64, 0x6f, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x44, 0x6f, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x54, 0x61, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x54, 0x61, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36,
	0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x6f, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64,
	0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x64, 0x6f, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f,
	0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x6f, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x63, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x63, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x47, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x4a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x10,
	0x49, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x4e,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x89,
	0x01, 0x0a, 0x0b, 0x44, 0x6f, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x55, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f,
	0x63, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x44,
	0x6f, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61,
	0x78, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x70, 0x22, 0x61, 0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x44, 0x6f, 0x63, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x8a, 0x03, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x98,
	0x01, 0x0a, 0x0e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0xe3, 0x01, 0x0a, 0x07, 0x44, 0x6f,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22,
	0x8b, 0x01, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x22, 0xaf, 0x01,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x22,
	0x7d, 0x0a, 0x11, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x55, 0x72, 0x6c, 0x44, 0x6f,
	0x63, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x52,
	0x0a, 0x12, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x55, 0x72, 0x6c, 0x44, 0x6f, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x53, 0x0a, 0x07, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x32, 0xf1, 0x07, 0x0a, 0x17, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x6f, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x09, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x27, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x12, 0x27, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x70, 0x12, 0x2a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x6f, 0x63, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x72, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x44, 0x6f, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x55, 0x72, 0x6c, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x55,
	0x72, 0x6c, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x6b, 0x5a, 0x69, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x69, 0x2d, 0x79, 0x75, 0x61, 0x6e, 0x6a, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6e, 0x2f, 0x61, 0x69, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2d, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x62, 0x66, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x64, 0x6f, 0x63,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescOnce sync.Once
	file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescData = file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDesc
)

func file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescGZIP() []byte {
	file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescOnce.Do(func() {
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescData)
	})
	return file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDescData
}

var file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_goTypes = []interface{}{
	(*GetDocListReq)(nil),        // 0: knowledgebase_doc_service.GetDocListReq
	(*GetDocListResp)(nil),       // 1: knowledgebase_doc_service.GetDocListResp
	(*ImportDocReq)(nil),         // 2: knowledgebase_doc_service.ImportDocReq
	(*UpdateDocStatusReq)(nil),   // 3: knowledgebase_doc_service.UpdateDocStatusReq
	(*UpdateDocMetaDataReq)(nil), // 4: knowledgebase_doc_service.UpdateDocMetaDataReq
	(*MetaData)(nil),             // 5: knowledgebase_doc_service.MetaData
	(*InitDocStatusReq)(nil),     // 6: knowledgebase_doc_service.InitDocStatusReq
	(*DeleteDocReq)(nil),         // 7: knowledgebase_doc_service.DeleteDocReq
	(*DocFileInfo)(nil),          // 8: knowledgebase_doc_service.DocFileInfo
	(*DocSegment)(nil),           // 9: knowledgebase_doc_service.DocSegment
	(*DocImportTipReq)(nil),      // 10: knowledgebase_doc_service.DocImportTipReq
	(*DocImportTipResp)(nil),     // 11: knowledgebase_doc_service.DocImportTipResp
	(*DocSegmentListResp)(nil),   // 12: knowledgebase_doc_service.DocSegmentListResp
	(*SegmentContent)(nil),       // 13: knowledgebase_doc_service.SegmentContent
	(*DocInfo)(nil),              // 14: knowledgebase_doc_service.DocInfo
	(*DocSegmentListReq)(nil),    // 15: knowledgebase_doc_service.DocSegmentListReq
	(*UpdateDocSegmentReq)(nil),  // 16: knowledgebase_doc_service.UpdateDocSegmentReq
	(*AnalysisUrlDocReq)(nil),    // 17: knowledgebase_doc_service.AnalysisUrlDocReq
	(*AnalysisUrlDocResp)(nil),   // 18: knowledgebase_doc_service.AnalysisUrlDocResp
	(*UrlInfo)(nil),              // 19: knowledgebase_doc_service.UrlInfo
	(*emptypb.Empty)(nil),        // 20: google.protobuf.Empty
}
var file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_depIdxs = []int32{
	14, // 0: knowledgebase_doc_service.GetDocListResp.docs:type_name -> knowledgebase_doc_service.DocInfo
	8,  // 1: knowledgebase_doc_service.ImportDocReq.docInfoList:type_name -> knowledgebase_doc_service.DocFileInfo
	9,  // 2: knowledgebase_doc_service.ImportDocReq.docSegment:type_name -> knowledgebase_doc_service.DocSegment
	5,  // 3: knowledgebase_doc_service.UpdateDocStatusReq.metaDataList:type_name -> knowledgebase_doc_service.MetaData
	5,  // 4: knowledgebase_doc_service.UpdateDocMetaDataReq.metaDataList:type_name -> knowledgebase_doc_service.MetaData
	13, // 5: knowledgebase_doc_service.DocSegmentListResp.contentList:type_name -> knowledgebase_doc_service.SegmentContent
	5,  // 6: knowledgebase_doc_service.DocSegmentListResp.metaDataList:type_name -> knowledgebase_doc_service.MetaData
	19, // 7: knowledgebase_doc_service.AnalysisUrlDocResp.urlList:type_name -> knowledgebase_doc_service.UrlInfo
	0,  // 8: knowledgebase_doc_service.KnowledgeBaseDocService.GetDocList:input_type -> knowledgebase_doc_service.GetDocListReq
	2,  // 9: knowledgebase_doc_service.KnowledgeBaseDocService.ImportDoc:input_type -> knowledgebase_doc_service.ImportDocReq
	3,  // 10: knowledgebase_doc_service.KnowledgeBaseDocService.UpdateDocStatus:input_type -> knowledgebase_doc_service.UpdateDocStatusReq
	4,  // 11: knowledgebase_doc_service.KnowledgeBaseDocService.UpdateDocMetaData:input_type -> knowledgebase_doc_service.UpdateDocMetaDataReq
	6,  // 12: knowledgebase_doc_service.KnowledgeBaseDocService.InitDocStatus:input_type -> knowledgebase_doc_service.InitDocStatusReq
	7,  // 13: knowledgebase_doc_service.KnowledgeBaseDocService.DeleteDoc:input_type -> knowledgebase_doc_service.DeleteDocReq
	10, // 14: knowledgebase_doc_service.KnowledgeBaseDocService.GetDocCategoryUploadTip:input_type -> knowledgebase_doc_service.DocImportTipReq
	15, // 15: knowledgebase_doc_service.KnowledgeBaseDocService.GetDocSegmentList:input_type -> knowledgebase_doc_service.DocSegmentListReq
	16, // 16: knowledgebase_doc_service.KnowledgeBaseDocService.UpdateDocSegmentStatus:input_type -> knowledgebase_doc_service.UpdateDocSegmentReq
	17, // 17: knowledgebase_doc_service.KnowledgeBaseDocService.AnalysisDocUrl:input_type -> knowledgebase_doc_service.AnalysisUrlDocReq
	1,  // 18: knowledgebase_doc_service.KnowledgeBaseDocService.GetDocList:output_type -> knowledgebase_doc_service.GetDocListResp
	20, // 19: knowledgebase_doc_service.KnowledgeBaseDocService.ImportDoc:output_type -> google.protobuf.Empty
	20, // 20: knowledgebase_doc_service.KnowledgeBaseDocService.UpdateDocStatus:output_type -> google.protobuf.Empty
	20, // 21: knowledgebase_doc_service.KnowledgeBaseDocService.UpdateDocMetaData:output_type -> google.protobuf.Empty
	20, // 22: knowledgebase_doc_service.KnowledgeBaseDocService.InitDocStatus:output_type -> google.protobuf.Empty
	20, // 23: knowledgebase_doc_service.KnowledgeBaseDocService.DeleteDoc:output_type -> google.protobuf.Empty
	11, // 24: knowledgebase_doc_service.KnowledgeBaseDocService.GetDocCategoryUploadTip:output_type -> knowledgebase_doc_service.DocImportTipResp
	12, // 25: knowledgebase_doc_service.KnowledgeBaseDocService.GetDocSegmentList:output_type -> knowledgebase_doc_service.DocSegmentListResp
	20, // 26: knowledgebase_doc_service.KnowledgeBaseDocService.UpdateDocSegmentStatus:output_type -> google.protobuf.Empty
	18, // 27: knowledgebase_doc_service.KnowledgeBaseDocService.AnalysisDocUrl:output_type -> knowledgebase_doc_service.AnalysisUrlDocResp
	18, // [18:28] is the sub-list for method output_type
	8,  // [8:18] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_init() }
func file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_init() {
	if File_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDocStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDocMetaDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitDocStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocImportTipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocImportTipResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocSegmentListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocSegmentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDocSegmentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisUrlDocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisUrlDocResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_goTypes,
		DependencyIndexes: file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_depIdxs,
		MessageInfos:      file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_msgTypes,
	}.Build()
	File_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto = out.File
	file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_rawDesc = nil
	file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_goTypes = nil
	file_proto_knowledgebase_doc_service_knowledgebase_doc_service_proto_depIdxs = nil
}
