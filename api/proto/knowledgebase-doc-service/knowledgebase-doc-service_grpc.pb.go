// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/knowledgebase-doc-service/knowledgebase-doc-service.proto

package knowledgebase_doc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KnowledgeBaseDocService_GetDocList_FullMethodName              = "/knowledgebase_doc_service.KnowledgeBaseDocService/GetDocList"
	KnowledgeBaseDocService_ImportDoc_FullMethodName               = "/knowledgebase_doc_service.KnowledgeBaseDocService/ImportDoc"
	KnowledgeBaseDocService_UpdateDocStatus_FullMethodName         = "/knowledgebase_doc_service.KnowledgeBaseDocService/UpdateDocStatus"
	KnowledgeBaseDocService_UpdateDocTag_FullMethodName            = "/knowledgebase_doc_service.KnowledgeBaseDocService/UpdateDocTag"
	KnowledgeBaseDocService_InitDocStatus_FullMethodName           = "/knowledgebase_doc_service.KnowledgeBaseDocService/InitDocStatus"
	KnowledgeBaseDocService_DeleteDoc_FullMethodName               = "/knowledgebase_doc_service.KnowledgeBaseDocService/DeleteDoc"
	KnowledgeBaseDocService_GetDocCategoryUploadTip_FullMethodName = "/knowledgebase_doc_service.KnowledgeBaseDocService/GetDocCategoryUploadTip"
	KnowledgeBaseDocService_GetDocSegmentList_FullMethodName       = "/knowledgebase_doc_service.KnowledgeBaseDocService/GetDocSegmentList"
	KnowledgeBaseDocService_UpdateDocSegmentStatus_FullMethodName  = "/knowledgebase_doc_service.KnowledgeBaseDocService/UpdateDocSegmentStatus"
	KnowledgeBaseDocService_AnalysisDocUrl_FullMethodName          = "/knowledgebase_doc_service.KnowledgeBaseDocService/AnalysisDocUrl"
)

// KnowledgeBaseDocServiceClient is the client API for KnowledgeBaseDocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnowledgeBaseDocServiceClient interface {
	// 获取文档列表
	GetDocList(ctx context.Context, in *GetDocListReq, opts ...grpc.CallOption) (*GetDocListResp, error)
	// 上传文档
	ImportDoc(ctx context.Context, in *ImportDocReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新文档状态
	UpdateDocStatus(ctx context.Context, in *UpdateDocStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新文档标签
	UpdateDocTag(ctx context.Context, in *UpdateDocTagReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 初始化文档状态
	InitDocStatus(ctx context.Context, in *InitDocStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除文档
	DeleteDoc(ctx context.Context, in *DeleteDocReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取知识库异步上传任务提示
	GetDocCategoryUploadTip(ctx context.Context, in *DocImportTipReq, opts ...grpc.CallOption) (*DocImportTipResp, error)
	// 获取知识库文档切分结果
	GetDocSegmentList(ctx context.Context, in *DocSegmentListReq, opts ...grpc.CallOption) (*DocSegmentListResp, error)
	// 更新文档切片状态
	UpdateDocSegmentStatus(ctx context.Context, in *UpdateDocSegmentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// url上传功能-解析url
	AnalysisDocUrl(ctx context.Context, in *AnalysisUrlDocReq, opts ...grpc.CallOption) (*AnalysisUrlDocResp, error)
}

type knowledgeBaseDocServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeBaseDocServiceClient(cc grpc.ClientConnInterface) KnowledgeBaseDocServiceClient {
	return &knowledgeBaseDocServiceClient{cc}
}

func (c *knowledgeBaseDocServiceClient) GetDocList(ctx context.Context, in *GetDocListReq, opts ...grpc.CallOption) (*GetDocListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocListResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseDocService_GetDocList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseDocServiceClient) ImportDoc(ctx context.Context, in *ImportDocReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseDocService_ImportDoc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseDocServiceClient) UpdateDocStatus(ctx context.Context, in *UpdateDocStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseDocService_UpdateDocStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseDocServiceClient) UpdateDocTag(ctx context.Context, in *UpdateDocTagReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseDocService_UpdateDocTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseDocServiceClient) InitDocStatus(ctx context.Context, in *InitDocStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseDocService_InitDocStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseDocServiceClient) DeleteDoc(ctx context.Context, in *DeleteDocReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseDocService_DeleteDoc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseDocServiceClient) GetDocCategoryUploadTip(ctx context.Context, in *DocImportTipReq, opts ...grpc.CallOption) (*DocImportTipResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocImportTipResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseDocService_GetDocCategoryUploadTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseDocServiceClient) GetDocSegmentList(ctx context.Context, in *DocSegmentListReq, opts ...grpc.CallOption) (*DocSegmentListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocSegmentListResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseDocService_GetDocSegmentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseDocServiceClient) UpdateDocSegmentStatus(ctx context.Context, in *UpdateDocSegmentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseDocService_UpdateDocSegmentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseDocServiceClient) AnalysisDocUrl(ctx context.Context, in *AnalysisUrlDocReq, opts ...grpc.CallOption) (*AnalysisUrlDocResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalysisUrlDocResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseDocService_AnalysisDocUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeBaseDocServiceServer is the server API for KnowledgeBaseDocService service.
// All implementations must embed UnimplementedKnowledgeBaseDocServiceServer
// for forward compatibility.
type KnowledgeBaseDocServiceServer interface {
	// 获取文档列表
	GetDocList(context.Context, *GetDocListReq) (*GetDocListResp, error)
	// 上传文档
	ImportDoc(context.Context, *ImportDocReq) (*emptypb.Empty, error)
	// 更新文档状态
	UpdateDocStatus(context.Context, *UpdateDocStatusReq) (*emptypb.Empty, error)
	// 更新文档标签
	UpdateDocTag(context.Context, *UpdateDocTagReq) (*emptypb.Empty, error)
	// 初始化文档状态
	InitDocStatus(context.Context, *InitDocStatusReq) (*emptypb.Empty, error)
	// 删除文档
	DeleteDoc(context.Context, *DeleteDocReq) (*emptypb.Empty, error)
	// 获取知识库异步上传任务提示
	GetDocCategoryUploadTip(context.Context, *DocImportTipReq) (*DocImportTipResp, error)
	// 获取知识库文档切分结果
	GetDocSegmentList(context.Context, *DocSegmentListReq) (*DocSegmentListResp, error)
	// 更新文档切片状态
	UpdateDocSegmentStatus(context.Context, *UpdateDocSegmentReq) (*emptypb.Empty, error)
	// url上传功能-解析url
	AnalysisDocUrl(context.Context, *AnalysisUrlDocReq) (*AnalysisUrlDocResp, error)
	mustEmbedUnimplementedKnowledgeBaseDocServiceServer()
}

// UnimplementedKnowledgeBaseDocServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKnowledgeBaseDocServiceServer struct{}

func (UnimplementedKnowledgeBaseDocServiceServer) GetDocList(context.Context, *GetDocListReq) (*GetDocListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocList not implemented")
}
func (UnimplementedKnowledgeBaseDocServiceServer) ImportDoc(context.Context, *ImportDocReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDoc not implemented")
}
func (UnimplementedKnowledgeBaseDocServiceServer) UpdateDocStatus(context.Context, *UpdateDocStatusReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocStatus not implemented")
}
func (UnimplementedKnowledgeBaseDocServiceServer) UpdateDocTag(context.Context, *UpdateDocTagReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocTag not implemented")
}
func (UnimplementedKnowledgeBaseDocServiceServer) InitDocStatus(context.Context, *InitDocStatusReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDocStatus not implemented")
}
func (UnimplementedKnowledgeBaseDocServiceServer) DeleteDoc(context.Context, *DeleteDocReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoc not implemented")
}
func (UnimplementedKnowledgeBaseDocServiceServer) GetDocCategoryUploadTip(context.Context, *DocImportTipReq) (*DocImportTipResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocCategoryUploadTip not implemented")
}
func (UnimplementedKnowledgeBaseDocServiceServer) GetDocSegmentList(context.Context, *DocSegmentListReq) (*DocSegmentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocSegmentList not implemented")
}
func (UnimplementedKnowledgeBaseDocServiceServer) UpdateDocSegmentStatus(context.Context, *UpdateDocSegmentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocSegmentStatus not implemented")
}
func (UnimplementedKnowledgeBaseDocServiceServer) AnalysisDocUrl(context.Context, *AnalysisUrlDocReq) (*AnalysisUrlDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalysisDocUrl not implemented")
}
func (UnimplementedKnowledgeBaseDocServiceServer) mustEmbedUnimplementedKnowledgeBaseDocServiceServer() {
}
func (UnimplementedKnowledgeBaseDocServiceServer) testEmbeddedByValue() {}

// UnsafeKnowledgeBaseDocServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnowledgeBaseDocServiceServer will
// result in compilation errors.
type UnsafeKnowledgeBaseDocServiceServer interface {
	mustEmbedUnimplementedKnowledgeBaseDocServiceServer()
}

func RegisterKnowledgeBaseDocServiceServer(s grpc.ServiceRegistrar, srv KnowledgeBaseDocServiceServer) {
	// If the following call pancis, it indicates UnimplementedKnowledgeBaseDocServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KnowledgeBaseDocService_ServiceDesc, srv)
}

func _KnowledgeBaseDocService_GetDocList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseDocServiceServer).GetDocList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseDocService_GetDocList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseDocServiceServer).GetDocList(ctx, req.(*GetDocListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseDocService_ImportDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseDocServiceServer).ImportDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseDocService_ImportDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseDocServiceServer).ImportDoc(ctx, req.(*ImportDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseDocService_UpdateDocStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseDocServiceServer).UpdateDocStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseDocService_UpdateDocStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseDocServiceServer).UpdateDocStatus(ctx, req.(*UpdateDocStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseDocService_UpdateDocTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseDocServiceServer).UpdateDocTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseDocService_UpdateDocTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseDocServiceServer).UpdateDocTag(ctx, req.(*UpdateDocTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseDocService_InitDocStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitDocStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseDocServiceServer).InitDocStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseDocService_InitDocStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseDocServiceServer).InitDocStatus(ctx, req.(*InitDocStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseDocService_DeleteDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseDocServiceServer).DeleteDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseDocService_DeleteDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseDocServiceServer).DeleteDoc(ctx, req.(*DeleteDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseDocService_GetDocCategoryUploadTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocImportTipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseDocServiceServer).GetDocCategoryUploadTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseDocService_GetDocCategoryUploadTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseDocServiceServer).GetDocCategoryUploadTip(ctx, req.(*DocImportTipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseDocService_GetDocSegmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocSegmentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseDocServiceServer).GetDocSegmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseDocService_GetDocSegmentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseDocServiceServer).GetDocSegmentList(ctx, req.(*DocSegmentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseDocService_UpdateDocSegmentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocSegmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseDocServiceServer).UpdateDocSegmentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseDocService_UpdateDocSegmentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseDocServiceServer).UpdateDocSegmentStatus(ctx, req.(*UpdateDocSegmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseDocService_AnalysisDocUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalysisUrlDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseDocServiceServer).AnalysisDocUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseDocService_AnalysisDocUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseDocServiceServer).AnalysisDocUrl(ctx, req.(*AnalysisUrlDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

// KnowledgeBaseDocService_ServiceDesc is the grpc.ServiceDesc for KnowledgeBaseDocService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KnowledgeBaseDocService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knowledgebase_doc_service.KnowledgeBaseDocService",
	HandlerType: (*KnowledgeBaseDocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocList",
			Handler:    _KnowledgeBaseDocService_GetDocList_Handler,
		},
		{
			MethodName: "ImportDoc",
			Handler:    _KnowledgeBaseDocService_ImportDoc_Handler,
		},
		{
			MethodName: "UpdateDocStatus",
			Handler:    _KnowledgeBaseDocService_UpdateDocStatus_Handler,
		},
		{
			MethodName: "UpdateDocTag",
			Handler:    _KnowledgeBaseDocService_UpdateDocTag_Handler,
		},
		{
			MethodName: "InitDocStatus",
			Handler:    _KnowledgeBaseDocService_InitDocStatus_Handler,
		},
		{
			MethodName: "DeleteDoc",
			Handler:    _KnowledgeBaseDocService_DeleteDoc_Handler,
		},
		{
			MethodName: "GetDocCategoryUploadTip",
			Handler:    _KnowledgeBaseDocService_GetDocCategoryUploadTip_Handler,
		},
		{
			MethodName: "GetDocSegmentList",
			Handler:    _KnowledgeBaseDocService_GetDocSegmentList_Handler,
		},
		{
			MethodName: "UpdateDocSegmentStatus",
			Handler:    _KnowledgeBaseDocService_UpdateDocSegmentStatus_Handler,
		},
		{
			MethodName: "AnalysisDocUrl",
			Handler:    _KnowledgeBaseDocService_AnalysisDocUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/knowledgebase-doc-service/knowledgebase-doc-service.proto",
}
