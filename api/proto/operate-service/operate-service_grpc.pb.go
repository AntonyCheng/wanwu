// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/operate-service/operate-service.proto

package operate_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OperateService_CreateSystemCustomTab_FullMethodName   = "/operate_service.OperateService/CreateSystemCustomTab"
	OperateService_CreateSystemCustomLogin_FullMethodName = "/operate_service.OperateService/CreateSystemCustomLogin"
	OperateService_CreateSystemCustomHome_FullMethodName  = "/operate_service.OperateService/CreateSystemCustomHome"
	OperateService_GetSystemCustom_FullMethodName         = "/operate_service.OperateService/GetSystemCustom"
)

// OperateServiceClient is the client API for OperateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperateServiceClient interface {
	CreateSystemCustomTab(ctx context.Context, in *CreateSystemCustomTabReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSystemCustomLogin(ctx context.Context, in *CreateSystemCustomLoginReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSystemCustomHome(ctx context.Context, in *CreateSystemCustomHomeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSystemCustom(ctx context.Context, in *GetSystemCustomReq, opts ...grpc.CallOption) (*SystemCustom, error)
}

type operateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperateServiceClient(cc grpc.ClientConnInterface) OperateServiceClient {
	return &operateServiceClient{cc}
}

func (c *operateServiceClient) CreateSystemCustomTab(ctx context.Context, in *CreateSystemCustomTabReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OperateService_CreateSystemCustomTab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateServiceClient) CreateSystemCustomLogin(ctx context.Context, in *CreateSystemCustomLoginReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OperateService_CreateSystemCustomLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateServiceClient) CreateSystemCustomHome(ctx context.Context, in *CreateSystemCustomHomeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OperateService_CreateSystemCustomHome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateServiceClient) GetSystemCustom(ctx context.Context, in *GetSystemCustomReq, opts ...grpc.CallOption) (*SystemCustom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemCustom)
	err := c.cc.Invoke(ctx, OperateService_GetSystemCustom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperateServiceServer is the server API for OperateService service.
// All implementations must embed UnimplementedOperateServiceServer
// for forward compatibility.
type OperateServiceServer interface {
	CreateSystemCustomTab(context.Context, *CreateSystemCustomTabReq) (*emptypb.Empty, error)
	CreateSystemCustomLogin(context.Context, *CreateSystemCustomLoginReq) (*emptypb.Empty, error)
	CreateSystemCustomHome(context.Context, *CreateSystemCustomHomeReq) (*emptypb.Empty, error)
	GetSystemCustom(context.Context, *GetSystemCustomReq) (*SystemCustom, error)
	mustEmbedUnimplementedOperateServiceServer()
}

// UnimplementedOperateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOperateServiceServer struct{}

func (UnimplementedOperateServiceServer) CreateSystemCustomTab(context.Context, *CreateSystemCustomTabReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemCustomTab not implemented")
}
func (UnimplementedOperateServiceServer) CreateSystemCustomLogin(context.Context, *CreateSystemCustomLoginReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemCustomLogin not implemented")
}
func (UnimplementedOperateServiceServer) CreateSystemCustomHome(context.Context, *CreateSystemCustomHomeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemCustomHome not implemented")
}
func (UnimplementedOperateServiceServer) GetSystemCustom(context.Context, *GetSystemCustomReq) (*SystemCustom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemCustom not implemented")
}
func (UnimplementedOperateServiceServer) mustEmbedUnimplementedOperateServiceServer() {}
func (UnimplementedOperateServiceServer) testEmbeddedByValue()                        {}

// UnsafeOperateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperateServiceServer will
// result in compilation errors.
type UnsafeOperateServiceServer interface {
	mustEmbedUnimplementedOperateServiceServer()
}

func RegisterOperateServiceServer(s grpc.ServiceRegistrar, srv OperateServiceServer) {
	// If the following call pancis, it indicates UnimplementedOperateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OperateService_ServiceDesc, srv)
}

func _OperateService_CreateSystemCustomTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemCustomTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperateServiceServer).CreateSystemCustomTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperateService_CreateSystemCustomTab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperateServiceServer).CreateSystemCustomTab(ctx, req.(*CreateSystemCustomTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperateService_CreateSystemCustomLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemCustomLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperateServiceServer).CreateSystemCustomLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperateService_CreateSystemCustomLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperateServiceServer).CreateSystemCustomLogin(ctx, req.(*CreateSystemCustomLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperateService_CreateSystemCustomHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemCustomHomeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperateServiceServer).CreateSystemCustomHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperateService_CreateSystemCustomHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperateServiceServer).CreateSystemCustomHome(ctx, req.(*CreateSystemCustomHomeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperateService_GetSystemCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemCustomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperateServiceServer).GetSystemCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperateService_GetSystemCustom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperateServiceServer).GetSystemCustom(ctx, req.(*GetSystemCustomReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OperateService_ServiceDesc is the grpc.ServiceDesc for OperateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "operate_service.OperateService",
	HandlerType: (*OperateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSystemCustomTab",
			Handler:    _OperateService_CreateSystemCustomTab_Handler,
		},
		{
			MethodName: "CreateSystemCustomLogin",
			Handler:    _OperateService_CreateSystemCustomLogin_Handler,
		},
		{
			MethodName: "CreateSystemCustomHome",
			Handler:    _OperateService_CreateSystemCustomHome_Handler,
		},
		{
			MethodName: "GetSystemCustom",
			Handler:    _OperateService_GetSystemCustom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/operate-service/operate-service.proto",
}
