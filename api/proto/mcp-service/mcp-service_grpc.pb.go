// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/mcp-service/mcp-service.proto

package mcp_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MCPService_GetSquareMCP_FullMethodName     = "/mcp_service.MCPService/GetSquareMCP"
	MCPService_GetSquareMCPList_FullMethodName = "/mcp_service.MCPService/GetSquareMCPList"
	MCPService_CreateCustomMCP_FullMethodName  = "/mcp_service.MCPService/CreateCustomMCP"
	MCPService_GetCustomMCP_FullMethodName     = "/mcp_service.MCPService/GetCustomMCP"
	MCPService_DeleteCustomMCP_FullMethodName  = "/mcp_service.MCPService/DeleteCustomMCP"
	MCPService_GetCustomMCPList_FullMethodName = "/mcp_service.MCPService/GetCustomMCPList"
	MCPService_GetMCPToolList_FullMethodName   = "/mcp_service.MCPService/GetMCPToolList"
	MCPService_GetMCPAvatar_FullMethodName     = "/mcp_service.MCPService/GetMCPAvatar"
)

// MCPServiceClient is the client API for MCPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MCPServiceClient interface {
	// --- square mcp ---
	GetSquareMCP(ctx context.Context, in *GetSquareMCPReq, opts ...grpc.CallOption) (*SquareMCPDetail, error)
	GetSquareMCPList(ctx context.Context, in *GetSquareMCPListReq, opts ...grpc.CallOption) (*SquareMCPList, error)
	// --- custom mcp ---
	CreateCustomMCP(ctx context.Context, in *CreateCustomMCPReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCustomMCP(ctx context.Context, in *GetCustomMCPReq, opts ...grpc.CallOption) (*CustomMCPDetail, error)
	DeleteCustomMCP(ctx context.Context, in *DeleteCustomMCPReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCustomMCPList(ctx context.Context, in *GetCustomMCPListReq, opts ...grpc.CallOption) (*CustomMCPList, error)
	// --- tool ---
	GetMCPToolList(ctx context.Context, in *GetMCPToolListReq, opts ...grpc.CallOption) (*MCPToolList, error)
	GetMCPAvatar(ctx context.Context, in *GetMCPAvatarReq, opts ...grpc.CallOption) (*MCPAvatar, error)
}

type mCPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMCPServiceClient(cc grpc.ClientConnInterface) MCPServiceClient {
	return &mCPServiceClient{cc}
}

func (c *mCPServiceClient) GetSquareMCP(ctx context.Context, in *GetSquareMCPReq, opts ...grpc.CallOption) (*SquareMCPDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SquareMCPDetail)
	err := c.cc.Invoke(ctx, MCPService_GetSquareMCP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetSquareMCPList(ctx context.Context, in *GetSquareMCPListReq, opts ...grpc.CallOption) (*SquareMCPList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SquareMCPList)
	err := c.cc.Invoke(ctx, MCPService_GetSquareMCPList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) CreateCustomMCP(ctx context.Context, in *CreateCustomMCPReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MCPService_CreateCustomMCP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetCustomMCP(ctx context.Context, in *GetCustomMCPReq, opts ...grpc.CallOption) (*CustomMCPDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomMCPDetail)
	err := c.cc.Invoke(ctx, MCPService_GetCustomMCP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) DeleteCustomMCP(ctx context.Context, in *DeleteCustomMCPReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MCPService_DeleteCustomMCP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetCustomMCPList(ctx context.Context, in *GetCustomMCPListReq, opts ...grpc.CallOption) (*CustomMCPList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomMCPList)
	err := c.cc.Invoke(ctx, MCPService_GetCustomMCPList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetMCPToolList(ctx context.Context, in *GetMCPToolListReq, opts ...grpc.CallOption) (*MCPToolList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MCPToolList)
	err := c.cc.Invoke(ctx, MCPService_GetMCPToolList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetMCPAvatar(ctx context.Context, in *GetMCPAvatarReq, opts ...grpc.CallOption) (*MCPAvatar, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MCPAvatar)
	err := c.cc.Invoke(ctx, MCPService_GetMCPAvatar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MCPServiceServer is the server API for MCPService service.
// All implementations must embed UnimplementedMCPServiceServer
// for forward compatibility.
type MCPServiceServer interface {
	// --- square mcp ---
	GetSquareMCP(context.Context, *GetSquareMCPReq) (*SquareMCPDetail, error)
	GetSquareMCPList(context.Context, *GetSquareMCPListReq) (*SquareMCPList, error)
	// --- custom mcp ---
	CreateCustomMCP(context.Context, *CreateCustomMCPReq) (*emptypb.Empty, error)
	GetCustomMCP(context.Context, *GetCustomMCPReq) (*CustomMCPDetail, error)
	DeleteCustomMCP(context.Context, *DeleteCustomMCPReq) (*emptypb.Empty, error)
	GetCustomMCPList(context.Context, *GetCustomMCPListReq) (*CustomMCPList, error)
	// --- tool ---
	GetMCPToolList(context.Context, *GetMCPToolListReq) (*MCPToolList, error)
	GetMCPAvatar(context.Context, *GetMCPAvatarReq) (*MCPAvatar, error)
	mustEmbedUnimplementedMCPServiceServer()
}

// UnimplementedMCPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMCPServiceServer struct{}

func (UnimplementedMCPServiceServer) GetSquareMCP(context.Context, *GetSquareMCPReq) (*SquareMCPDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSquareMCP not implemented")
}
func (UnimplementedMCPServiceServer) GetSquareMCPList(context.Context, *GetSquareMCPListReq) (*SquareMCPList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSquareMCPList not implemented")
}
func (UnimplementedMCPServiceServer) CreateCustomMCP(context.Context, *CreateCustomMCPReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomMCP not implemented")
}
func (UnimplementedMCPServiceServer) GetCustomMCP(context.Context, *GetCustomMCPReq) (*CustomMCPDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomMCP not implemented")
}
func (UnimplementedMCPServiceServer) DeleteCustomMCP(context.Context, *DeleteCustomMCPReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomMCP not implemented")
}
func (UnimplementedMCPServiceServer) GetCustomMCPList(context.Context, *GetCustomMCPListReq) (*CustomMCPList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomMCPList not implemented")
}
func (UnimplementedMCPServiceServer) GetMCPToolList(context.Context, *GetMCPToolListReq) (*MCPToolList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMCPToolList not implemented")
}
func (UnimplementedMCPServiceServer) GetMCPAvatar(context.Context, *GetMCPAvatarReq) (*MCPAvatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMCPAvatar not implemented")
}
func (UnimplementedMCPServiceServer) mustEmbedUnimplementedMCPServiceServer() {}
func (UnimplementedMCPServiceServer) testEmbeddedByValue()                    {}

// UnsafeMCPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MCPServiceServer will
// result in compilation errors.
type UnsafeMCPServiceServer interface {
	mustEmbedUnimplementedMCPServiceServer()
}

func RegisterMCPServiceServer(s grpc.ServiceRegistrar, srv MCPServiceServer) {
	// If the following call pancis, it indicates UnimplementedMCPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MCPService_ServiceDesc, srv)
}

func _MCPService_GetSquareMCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSquareMCPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetSquareMCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetSquareMCP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetSquareMCP(ctx, req.(*GetSquareMCPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetSquareMCPList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSquareMCPListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetSquareMCPList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetSquareMCPList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetSquareMCPList(ctx, req.(*GetSquareMCPListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_CreateCustomMCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomMCPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).CreateCustomMCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_CreateCustomMCP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).CreateCustomMCP(ctx, req.(*CreateCustomMCPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetCustomMCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomMCPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetCustomMCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetCustomMCP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetCustomMCP(ctx, req.(*GetCustomMCPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_DeleteCustomMCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomMCPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).DeleteCustomMCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_DeleteCustomMCP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).DeleteCustomMCP(ctx, req.(*DeleteCustomMCPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetCustomMCPList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomMCPListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetCustomMCPList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetCustomMCPList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetCustomMCPList(ctx, req.(*GetCustomMCPListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetMCPToolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMCPToolListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetMCPToolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetMCPToolList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetMCPToolList(ctx, req.(*GetMCPToolListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetMCPAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMCPAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetMCPAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetMCPAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetMCPAvatar(ctx, req.(*GetMCPAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MCPService_ServiceDesc is the grpc.ServiceDesc for MCPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MCPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp_service.MCPService",
	HandlerType: (*MCPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSquareMCP",
			Handler:    _MCPService_GetSquareMCP_Handler,
		},
		{
			MethodName: "GetSquareMCPList",
			Handler:    _MCPService_GetSquareMCPList_Handler,
		},
		{
			MethodName: "CreateCustomMCP",
			Handler:    _MCPService_CreateCustomMCP_Handler,
		},
		{
			MethodName: "GetCustomMCP",
			Handler:    _MCPService_GetCustomMCP_Handler,
		},
		{
			MethodName: "DeleteCustomMCP",
			Handler:    _MCPService_DeleteCustomMCP_Handler,
		},
		{
			MethodName: "GetCustomMCPList",
			Handler:    _MCPService_GetCustomMCPList_Handler,
		},
		{
			MethodName: "GetMCPToolList",
			Handler:    _MCPService_GetMCPToolList_Handler,
		},
		{
			MethodName: "GetMCPAvatar",
			Handler:    _MCPService_GetMCPAvatar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mcp-service/mcp-service.proto",
}
