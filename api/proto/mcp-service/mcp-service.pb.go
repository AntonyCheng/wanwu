// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.29.4
// source: proto/mcp-service/mcp-service.proto

package mcp_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSquareMCPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId       string `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	McpSquareId string `protobuf:"bytes,3,opt,name=mcpSquareId,proto3" json:"mcpSquareId,omitempty"`
}

func (x *GetSquareMCPReq) Reset() {
	*x = GetSquareMCPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSquareMCPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSquareMCPReq) ProtoMessage() {}

func (x *GetSquareMCPReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSquareMCPReq.ProtoReflect.Descriptor instead.
func (*GetSquareMCPReq) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetSquareMCPReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetSquareMCPReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSquareMCPReq) GetMcpSquareId() string {
	if x != nil {
		return x.McpSquareId
	}
	return ""
}

type GetSquareMCPListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    string `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`       // (暂无)
	UserId   string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`     // (暂无)
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"` // all | data | create | search | ...
	Name     string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSquareMCPListReq) Reset() {
	*x = GetSquareMCPListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSquareMCPListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSquareMCPListReq) ProtoMessage() {}

func (x *GetSquareMCPListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSquareMCPListReq.ProtoReflect.Descriptor instead.
func (*GetSquareMCPListReq) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetSquareMCPListReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetSquareMCPListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSquareMCPListReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *GetSquareMCPListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SquareMCPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*SquareMCPInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *SquareMCPList) Reset() {
	*x = SquareMCPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareMCPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareMCPList) ProtoMessage() {}

func (x *SquareMCPList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareMCPList.ProtoReflect.Descriptor instead.
func (*SquareMCPList) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{2}
}

func (x *SquareMCPList) GetInfos() []*SquareMCPInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateCustomMCPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId       string `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	McpSquareId string `protobuf:"bytes,3,opt,name=mcpSquareId,proto3" json:"mcpSquareId,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Desc        string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	From        string `protobuf:"bytes,6,opt,name=from,proto3" json:"from,omitempty"`
	SseUrl      string `protobuf:"bytes,7,opt,name=sseUrl,proto3" json:"sseUrl,omitempty"`
}

func (x *CreateCustomMCPReq) Reset() {
	*x = CreateCustomMCPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomMCPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomMCPReq) ProtoMessage() {}

func (x *CreateCustomMCPReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomMCPReq.ProtoReflect.Descriptor instead.
func (*CreateCustomMCPReq) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCustomMCPReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *CreateCustomMCPReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateCustomMCPReq) GetMcpSquareId() string {
	if x != nil {
		return x.McpSquareId
	}
	return ""
}

func (x *CreateCustomMCPReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCustomMCPReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateCustomMCPReq) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CreateCustomMCPReq) GetSseUrl() string {
	if x != nil {
		return x.SseUrl
	}
	return ""
}

type GetCustomMCPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	McpId string `protobuf:"bytes,1,opt,name=mcpId,proto3" json:"mcpId,omitempty"`
}

func (x *GetCustomMCPReq) Reset() {
	*x = GetCustomMCPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomMCPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomMCPReq) ProtoMessage() {}

func (x *GetCustomMCPReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomMCPReq.ProtoReflect.Descriptor instead.
func (*GetCustomMCPReq) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetCustomMCPReq) GetMcpId() string {
	if x != nil {
		return x.McpId
	}
	return ""
}

type DeleteCustomMCPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	McpId string `protobuf:"bytes,1,opt,name=mcpId,proto3" json:"mcpId,omitempty"`
}

func (x *DeleteCustomMCPReq) Reset() {
	*x = DeleteCustomMCPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomMCPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomMCPReq) ProtoMessage() {}

func (x *DeleteCustomMCPReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomMCPReq.ProtoReflect.Descriptor instead.
func (*DeleteCustomMCPReq) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteCustomMCPReq) GetMcpId() string {
	if x != nil {
		return x.McpId
	}
	return ""
}

type GetCustomMCPListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId  string `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCustomMCPListReq) Reset() {
	*x = GetCustomMCPListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomMCPListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomMCPListReq) ProtoMessage() {}

func (x *GetCustomMCPListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomMCPListReq.ProtoReflect.Descriptor instead.
func (*GetCustomMCPListReq) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetCustomMCPListReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetCustomMCPListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCustomMCPListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CustomMCPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CustomMCPInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *CustomMCPList) Reset() {
	*x = CustomMCPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomMCPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomMCPList) ProtoMessage() {}

func (x *CustomMCPList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomMCPList.ProtoReflect.Descriptor instead.
func (*CustomMCPList) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{7}
}

func (x *CustomMCPList) GetInfos() []*CustomMCPInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetMCPToolListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	McpId  string `protobuf:"bytes,1,opt,name=mcpId,proto3" json:"mcpId,omitempty"`   // mcpId优先
	SseUrl string `protobuf:"bytes,2,opt,name=sseUrl,proto3" json:"sseUrl,omitempty"` // mcpId为空取sseUrl
}

func (x *GetMCPToolListReq) Reset() {
	*x = GetMCPToolListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMCPToolListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMCPToolListReq) ProtoMessage() {}

func (x *GetMCPToolListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMCPToolListReq.ProtoReflect.Descriptor instead.
func (*GetMCPToolListReq) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetMCPToolListReq) GetMcpId() string {
	if x != nil {
		return x.McpId
	}
	return ""
}

func (x *GetMCPToolListReq) GetSseUrl() string {
	if x != nil {
		return x.SseUrl
	}
	return ""
}

type MCPToolList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tools []*MCPTool `protobuf:"bytes,1,rep,name=tools,proto3" json:"tools,omitempty"`
}

func (x *MCPToolList) Reset() {
	*x = MCPToolList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCPToolList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPToolList) ProtoMessage() {}

func (x *MCPToolList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPToolList.ProtoReflect.Descriptor instead.
func (*MCPToolList) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{9}
}

func (x *MCPToolList) GetTools() []*MCPTool {
	if x != nil {
		return x.Tools
	}
	return nil
}

type GetMCPAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarPath string `protobuf:"bytes,1,opt,name=avatarPath,proto3" json:"avatarPath,omitempty"`
}

func (x *GetMCPAvatarReq) Reset() {
	*x = GetMCPAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMCPAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMCPAvatarReq) ProtoMessage() {}

func (x *GetMCPAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMCPAvatarReq.ProtoReflect.Descriptor instead.
func (*GetMCPAvatarReq) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetMCPAvatarReq) GetAvatarPath() string {
	if x != nil {
		return x.AvatarPath
	}
	return ""
}

type MCPAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"` // 文件名
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`         // 文件二进制数据
}

func (x *MCPAvatar) Reset() {
	*x = MCPAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCPAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPAvatar) ProtoMessage() {}

func (x *MCPAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPAvatar.ProtoReflect.Descriptor instead.
func (*MCPAvatar) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{11}
}

func (x *MCPAvatar) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MCPAvatar) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CustomMCPDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	McpId  string          `protobuf:"bytes,1,opt,name=mcpId,proto3" json:"mcpId,omitempty"`
	SseUrl string          `protobuf:"bytes,2,opt,name=sseUrl,proto3" json:"sseUrl,omitempty"`
	Info   *SquareMCPInfo  `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Intro  *SquareMCPIntro `protobuf:"bytes,4,opt,name=intro,proto3" json:"intro,omitempty"`
}

func (x *CustomMCPDetail) Reset() {
	*x = CustomMCPDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomMCPDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomMCPDetail) ProtoMessage() {}

func (x *CustomMCPDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomMCPDetail.ProtoReflect.Descriptor instead.
func (*CustomMCPDetail) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{12}
}

func (x *CustomMCPDetail) GetMcpId() string {
	if x != nil {
		return x.McpId
	}
	return ""
}

func (x *CustomMCPDetail) GetSseUrl() string {
	if x != nil {
		return x.SseUrl
	}
	return ""
}

func (x *CustomMCPDetail) GetInfo() *SquareMCPInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CustomMCPDetail) GetIntro() *SquareMCPIntro {
	if x != nil {
		return x.Intro
	}
	return nil
}

type CustomMCPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	McpId  string         `protobuf:"bytes,1,opt,name=mcpId,proto3" json:"mcpId,omitempty"`
	SseUrl string         `protobuf:"bytes,2,opt,name=sseUrl,proto3" json:"sseUrl,omitempty"`
	Info   *SquareMCPInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CustomMCPInfo) Reset() {
	*x = CustomMCPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomMCPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomMCPInfo) ProtoMessage() {}

func (x *CustomMCPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomMCPInfo.ProtoReflect.Descriptor instead.
func (*CustomMCPInfo) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{13}
}

func (x *CustomMCPInfo) GetMcpId() string {
	if x != nil {
		return x.McpId
	}
	return ""
}

func (x *CustomMCPInfo) GetSseUrl() string {
	if x != nil {
		return x.SseUrl
	}
	return ""
}

func (x *CustomMCPInfo) GetInfo() *SquareMCPInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type SquareMCPDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info  *SquareMCPInfo  `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Intro *SquareMCPIntro `protobuf:"bytes,2,opt,name=intro,proto3" json:"intro,omitempty"`
	Tool  *MCPTools       `protobuf:"bytes,3,opt,name=tool,proto3" json:"tool,omitempty"`
}

func (x *SquareMCPDetail) Reset() {
	*x = SquareMCPDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareMCPDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareMCPDetail) ProtoMessage() {}

func (x *SquareMCPDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareMCPDetail.ProtoReflect.Descriptor instead.
func (*SquareMCPDetail) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{14}
}

func (x *SquareMCPDetail) GetInfo() *SquareMCPInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SquareMCPDetail) GetIntro() *SquareMCPIntro {
	if x != nil {
		return x.Intro
	}
	return nil
}

func (x *SquareMCPDetail) GetTool() *MCPTools {
	if x != nil {
		return x.Tool
	}
	return nil
}

type SquareMCPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	McpSquareId string `protobuf:"bytes,1,opt,name=mcpSquareId,proto3" json:"mcpSquareId,omitempty"`
	AvatarPath  string `protobuf:"bytes,2,opt,name=avatarPath,proto3" json:"avatarPath,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Desc        string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	From        string `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	Category    string `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *SquareMCPInfo) Reset() {
	*x = SquareMCPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareMCPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareMCPInfo) ProtoMessage() {}

func (x *SquareMCPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareMCPInfo.ProtoReflect.Descriptor instead.
func (*SquareMCPInfo) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{15}
}

func (x *SquareMCPInfo) GetMcpSquareId() string {
	if x != nil {
		return x.McpSquareId
	}
	return ""
}

func (x *SquareMCPInfo) GetAvatarPath() string {
	if x != nil {
		return x.AvatarPath
	}
	return ""
}

func (x *SquareMCPInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SquareMCPInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SquareMCPInfo) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SquareMCPInfo) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type SquareMCPIntro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary  string `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`   // 使用概述
	Feature  string `protobuf:"bytes,2,opt,name=feature,proto3" json:"feature,omitempty"`   // 特性说明
	Scenario string `protobuf:"bytes,3,opt,name=scenario,proto3" json:"scenario,omitempty"` // 应用场景
	Manual   string `protobuf:"bytes,4,opt,name=manual,proto3" json:"manual,omitempty"`     // 使用说明
	Detail   string `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`     // 详情
}

func (x *SquareMCPIntro) Reset() {
	*x = SquareMCPIntro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareMCPIntro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareMCPIntro) ProtoMessage() {}

func (x *SquareMCPIntro) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareMCPIntro.ProtoReflect.Descriptor instead.
func (*SquareMCPIntro) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{16}
}

func (x *SquareMCPIntro) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *SquareMCPIntro) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

func (x *SquareMCPIntro) GetScenario() string {
	if x != nil {
		return x.Scenario
	}
	return ""
}

func (x *SquareMCPIntro) GetManual() string {
	if x != nil {
		return x.Manual
	}
	return ""
}

func (x *SquareMCPIntro) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type MCPTools struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SseUrl    string     `protobuf:"bytes,1,opt,name=sseUrl,proto3" json:"sseUrl,omitempty"`
	HasCustom bool       `protobuf:"varint,2,opt,name=hasCustom,proto3" json:"hasCustom,omitempty"`
	Tools     []*MCPTool `protobuf:"bytes,3,rep,name=tools,proto3" json:"tools,omitempty"`
}

func (x *MCPTools) Reset() {
	*x = MCPTools{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCPTools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPTools) ProtoMessage() {}

func (x *MCPTools) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPTools.ProtoReflect.Descriptor instead.
func (*MCPTools) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{17}
}

func (x *MCPTools) GetSseUrl() string {
	if x != nil {
		return x.SseUrl
	}
	return ""
}

func (x *MCPTools) GetHasCustom() bool {
	if x != nil {
		return x.HasCustom
	}
	return false
}

func (x *MCPTools) GetTools() []*MCPTool {
	if x != nil {
		return x.Tools
	}
	return nil
}

type MCPTool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string              `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	InputSchema *MCPToolInputSchema `protobuf:"bytes,3,opt,name=inputSchema,proto3" json:"inputSchema,omitempty"`
}

func (x *MCPTool) Reset() {
	*x = MCPTool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCPTool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPTool) ProtoMessage() {}

func (x *MCPTool) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPTool.ProtoReflect.Descriptor instead.
func (*MCPTool) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{18}
}

func (x *MCPTool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MCPTool) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MCPTool) GetInputSchema() *MCPToolInputSchema {
	if x != nil {
		return x.InputSchema
	}
	return nil
}

type MCPToolInputSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string                              `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // 固定 object
	Properties map[string]*MCPToolInputSchemaValue `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Required   []string                            `protobuf:"bytes,3,rep,name=required,proto3" json:"required,omitempty"`
}

func (x *MCPToolInputSchema) Reset() {
	*x = MCPToolInputSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCPToolInputSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPToolInputSchema) ProtoMessage() {}

func (x *MCPToolInputSchema) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPToolInputSchema.ProtoReflect.Descriptor instead.
func (*MCPToolInputSchema) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{19}
}

func (x *MCPToolInputSchema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MCPToolInputSchema) GetProperties() map[string]*MCPToolInputSchemaValue {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *MCPToolInputSchema) GetRequired() []string {
	if x != nil {
		return x.Required
	}
	return nil
}

type MCPToolInputSchemaValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *MCPToolInputSchemaValue) Reset() {
	*x = MCPToolInputSchemaValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCPToolInputSchemaValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPToolInputSchemaValue) ProtoMessage() {}

func (x *MCPToolInputSchemaValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_service_mcp_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPToolInputSchemaValue.ProtoReflect.Descriptor instead.
func (*MCPToolInputSchemaValue) Descriptor() ([]byte, []int) {
	return file_proto_mcp_service_mcp_service_proto_rawDescGZIP(), []int{20}
}

func (x *MCPToolInputSchemaValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MCPToolInputSchemaValue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_proto_mcp_service_mcp_service_proto protoreflect.FileDescriptor

var file_proto_mcp_service_mcp_service_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x63, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6d, 0x63, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x61, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x43, 0x50, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x63, 0x70, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x63, 0x70, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x49, 0x64, 0x22, 0x73, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d,
	0x43, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x0d, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x4d, 0x43, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x43, 0x50, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x43, 0x50, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x63, 0x70, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x63, 0x70, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x27, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4d, 0x43, 0x50, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x63, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x70, 0x49, 0x64, 0x22, 0x2a,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x43,
	0x50, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x63, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x70, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x43, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x43, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x43, 0x50,
	0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x63, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x70, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x39, 0x0a, 0x0b, 0x4d, 0x43, 0x50,
	0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x43, 0x50, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x31, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x43, 0x50, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x50, 0x61, 0x74, 0x68, 0x22, 0x3b, 0x0a, 0x09, 0x4d, 0x43, 0x50, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x01, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d,
	0x43, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x63, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x70, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x43, 0x50, 0x49, 0x6e, 0x74,
	0x72, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x22, 0x6d, 0x0a, 0x0d, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4d, 0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x63,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x70, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x43, 0x50, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x4d, 0x43, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x63, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d,
	0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x05,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x63,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x4d, 0x43, 0x50, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12,
	0x29, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x43, 0x50, 0x54,
	0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x53,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x63, 0x70, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x63, 0x70, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x4d, 0x43, 0x50, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x6c, 0x0a, 0x08, 0x4d, 0x43, 0x50,
	0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x68, 0x61, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x05, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x63, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x43, 0x50, 0x54, 0x6f, 0x6f, 0x6c,
	0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x07, 0x4d, 0x43, 0x50, 0x54,
	0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x43, 0x50,
	0x54, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xfa, 0x01, 0x0a,
	0x12, 0x4d, 0x43, 0x50, 0x54, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x63,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x43, 0x50, 0x54, 0x6f, 0x6f,
	0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x1a, 0x63, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x43, 0x50, 0x54, 0x6f, 0x6f, 0x6c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x17, 0x4d, 0x43, 0x50,
	0x54, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x82, 0x05, 0x0a, 0x0a, 0x4d,
	0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x43, 0x50, 0x12, 0x1c, 0x2e, 0x6d, 0x63, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x4d, 0x43, 0x50, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x43, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x4d, 0x43, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x63,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x4d, 0x43, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x4d, 0x43, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x43, 0x50, 0x12, 0x1f,
	0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x43, 0x50, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x43, 0x50, 0x12, 0x1c, 0x2e, 0x6d, 0x63, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4d, 0x43, 0x50, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x43, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x43, 0x50, 0x12, 0x1f, 0x2e, 0x6d, 0x63, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x43, 0x50, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4d, 0x43, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x63, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4d, 0x43, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6d, 0x63,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4d, 0x43, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4d, 0x43, 0x50, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x63,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x43, 0x50,
	0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6d, 0x63,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x43, 0x50, 0x54, 0x6f, 0x6f,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x43,
	0x50, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1c, 0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x43, 0x50, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6d, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x43, 0x50, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x00, 0x42,
	0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x6e,
	0x69, 0x63, 0x6f, 0x6d, 0x41, 0x49, 0x2f, 0x77, 0x61, 0x6e, 0x77, 0x75, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x63, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_mcp_service_mcp_service_proto_rawDescOnce sync.Once
	file_proto_mcp_service_mcp_service_proto_rawDescData = file_proto_mcp_service_mcp_service_proto_rawDesc
)

func file_proto_mcp_service_mcp_service_proto_rawDescGZIP() []byte {
	file_proto_mcp_service_mcp_service_proto_rawDescOnce.Do(func() {
		file_proto_mcp_service_mcp_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_mcp_service_mcp_service_proto_rawDescData)
	})
	return file_proto_mcp_service_mcp_service_proto_rawDescData
}

var file_proto_mcp_service_mcp_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_mcp_service_mcp_service_proto_goTypes = []interface{}{
	(*GetSquareMCPReq)(nil),         // 0: mcp_service.GetSquareMCPReq
	(*GetSquareMCPListReq)(nil),     // 1: mcp_service.GetSquareMCPListReq
	(*SquareMCPList)(nil),           // 2: mcp_service.SquareMCPList
	(*CreateCustomMCPReq)(nil),      // 3: mcp_service.CreateCustomMCPReq
	(*GetCustomMCPReq)(nil),         // 4: mcp_service.GetCustomMCPReq
	(*DeleteCustomMCPReq)(nil),      // 5: mcp_service.DeleteCustomMCPReq
	(*GetCustomMCPListReq)(nil),     // 6: mcp_service.GetCustomMCPListReq
	(*CustomMCPList)(nil),           // 7: mcp_service.CustomMCPList
	(*GetMCPToolListReq)(nil),       // 8: mcp_service.GetMCPToolListReq
	(*MCPToolList)(nil),             // 9: mcp_service.MCPToolList
	(*GetMCPAvatarReq)(nil),         // 10: mcp_service.GetMCPAvatarReq
	(*MCPAvatar)(nil),               // 11: mcp_service.MCPAvatar
	(*CustomMCPDetail)(nil),         // 12: mcp_service.CustomMCPDetail
	(*CustomMCPInfo)(nil),           // 13: mcp_service.CustomMCPInfo
	(*SquareMCPDetail)(nil),         // 14: mcp_service.SquareMCPDetail
	(*SquareMCPInfo)(nil),           // 15: mcp_service.SquareMCPInfo
	(*SquareMCPIntro)(nil),          // 16: mcp_service.SquareMCPIntro
	(*MCPTools)(nil),                // 17: mcp_service.MCPTools
	(*MCPTool)(nil),                 // 18: mcp_service.MCPTool
	(*MCPToolInputSchema)(nil),      // 19: mcp_service.MCPToolInputSchema
	(*MCPToolInputSchemaValue)(nil), // 20: mcp_service.MCPToolInputSchemaValue
	nil,                             // 21: mcp_service.MCPToolInputSchema.PropertiesEntry
	(*emptypb.Empty)(nil),           // 22: google.protobuf.Empty
}
var file_proto_mcp_service_mcp_service_proto_depIdxs = []int32{
	15, // 0: mcp_service.SquareMCPList.infos:type_name -> mcp_service.SquareMCPInfo
	13, // 1: mcp_service.CustomMCPList.infos:type_name -> mcp_service.CustomMCPInfo
	18, // 2: mcp_service.MCPToolList.tools:type_name -> mcp_service.MCPTool
	15, // 3: mcp_service.CustomMCPDetail.info:type_name -> mcp_service.SquareMCPInfo
	16, // 4: mcp_service.CustomMCPDetail.intro:type_name -> mcp_service.SquareMCPIntro
	15, // 5: mcp_service.CustomMCPInfo.info:type_name -> mcp_service.SquareMCPInfo
	15, // 6: mcp_service.SquareMCPDetail.info:type_name -> mcp_service.SquareMCPInfo
	16, // 7: mcp_service.SquareMCPDetail.intro:type_name -> mcp_service.SquareMCPIntro
	17, // 8: mcp_service.SquareMCPDetail.tool:type_name -> mcp_service.MCPTools
	18, // 9: mcp_service.MCPTools.tools:type_name -> mcp_service.MCPTool
	19, // 10: mcp_service.MCPTool.inputSchema:type_name -> mcp_service.MCPToolInputSchema
	21, // 11: mcp_service.MCPToolInputSchema.properties:type_name -> mcp_service.MCPToolInputSchema.PropertiesEntry
	20, // 12: mcp_service.MCPToolInputSchema.PropertiesEntry.value:type_name -> mcp_service.MCPToolInputSchemaValue
	0,  // 13: mcp_service.MCPService.GetSquareMCP:input_type -> mcp_service.GetSquareMCPReq
	1,  // 14: mcp_service.MCPService.GetSquareMCPList:input_type -> mcp_service.GetSquareMCPListReq
	3,  // 15: mcp_service.MCPService.CreateCustomMCP:input_type -> mcp_service.CreateCustomMCPReq
	4,  // 16: mcp_service.MCPService.GetCustomMCP:input_type -> mcp_service.GetCustomMCPReq
	5,  // 17: mcp_service.MCPService.DeleteCustomMCP:input_type -> mcp_service.DeleteCustomMCPReq
	6,  // 18: mcp_service.MCPService.GetCustomMCPList:input_type -> mcp_service.GetCustomMCPListReq
	8,  // 19: mcp_service.MCPService.GetMCPToolList:input_type -> mcp_service.GetMCPToolListReq
	10, // 20: mcp_service.MCPService.GetMCPAvatar:input_type -> mcp_service.GetMCPAvatarReq
	14, // 21: mcp_service.MCPService.GetSquareMCP:output_type -> mcp_service.SquareMCPDetail
	2,  // 22: mcp_service.MCPService.GetSquareMCPList:output_type -> mcp_service.SquareMCPList
	22, // 23: mcp_service.MCPService.CreateCustomMCP:output_type -> google.protobuf.Empty
	12, // 24: mcp_service.MCPService.GetCustomMCP:output_type -> mcp_service.CustomMCPDetail
	22, // 25: mcp_service.MCPService.DeleteCustomMCP:output_type -> google.protobuf.Empty
	7,  // 26: mcp_service.MCPService.GetCustomMCPList:output_type -> mcp_service.CustomMCPList
	9,  // 27: mcp_service.MCPService.GetMCPToolList:output_type -> mcp_service.MCPToolList
	11, // 28: mcp_service.MCPService.GetMCPAvatar:output_type -> mcp_service.MCPAvatar
	21, // [21:29] is the sub-list for method output_type
	13, // [13:21] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_mcp_service_mcp_service_proto_init() }
func file_proto_mcp_service_mcp_service_proto_init() {
	if File_proto_mcp_service_mcp_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_mcp_service_mcp_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSquareMCPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSquareMCPListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquareMCPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomMCPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomMCPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomMCPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomMCPListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomMCPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMCPToolListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCPToolList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMCPAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCPAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomMCPDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomMCPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquareMCPDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquareMCPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquareMCPIntro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCPTools); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCPTool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCPToolInputSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mcp_service_mcp_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCPToolInputSchemaValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_mcp_service_mcp_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_mcp_service_mcp_service_proto_goTypes,
		DependencyIndexes: file_proto_mcp_service_mcp_service_proto_depIdxs,
		MessageInfos:      file_proto_mcp_service_mcp_service_proto_msgTypes,
	}.Build()
	File_proto_mcp_service_mcp_service_proto = out.File
	file_proto_mcp_service_mcp_service_proto_rawDesc = nil
	file_proto_mcp_service_mcp_service_proto_goTypes = nil
	file_proto_mcp_service_mcp_service_proto_depIdxs = nil
}
