// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/knowledgebase-tag-service/knowledgebase-tag-service.proto

package knowledgebase_tag_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KnowledgeBaseTagService_SelectKnowledgeTagList_FullMethodName = "/knowledgebase_tag_service.KnowledgeBaseTagService/SelectKnowledgeTagList"
	KnowledgeBaseTagService_CreateKnowledgeTag_FullMethodName     = "/knowledgebase_tag_service.KnowledgeBaseTagService/CreateKnowledgeTag"
	KnowledgeBaseTagService_UpdateKnowledgeTag_FullMethodName     = "/knowledgebase_tag_service.KnowledgeBaseTagService/UpdateKnowledgeTag"
	KnowledgeBaseTagService_DeleteKnowledgeTag_FullMethodName     = "/knowledgebase_tag_service.KnowledgeBaseTagService/DeleteKnowledgeTag"
	KnowledgeBaseTagService_BindKnowledgeTag_FullMethodName       = "/knowledgebase_tag_service.KnowledgeBaseTagService/BindKnowledgeTag"
)

// KnowledgeBaseTagServiceClient is the client API for KnowledgeBaseTagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnowledgeBaseTagServiceClient interface {
	// 获取知识库标签列表
	SelectKnowledgeTagList(ctx context.Context, in *KnowledgeTagSelectReq, opts ...grpc.CallOption) (*KnowledgeTagSelectListResp, error)
	// 新增知识库标签
	CreateKnowledgeTag(ctx context.Context, in *CreateKnowledgeTagReq, opts ...grpc.CallOption) (*CreateKnowledgeTagResp, error)
	// 修改知识库标签
	UpdateKnowledgeTag(ctx context.Context, in *UpdateKnowledgeTagReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除知识库标签
	DeleteKnowledgeTag(ctx context.Context, in *DeleteKnowledgeTagReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 修改知识库标签
	BindKnowledgeTag(ctx context.Context, in *BindKnowledgeTagReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type knowledgeBaseTagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeBaseTagServiceClient(cc grpc.ClientConnInterface) KnowledgeBaseTagServiceClient {
	return &knowledgeBaseTagServiceClient{cc}
}

func (c *knowledgeBaseTagServiceClient) SelectKnowledgeTagList(ctx context.Context, in *KnowledgeTagSelectReq, opts ...grpc.CallOption) (*KnowledgeTagSelectListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnowledgeTagSelectListResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseTagService_SelectKnowledgeTagList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseTagServiceClient) CreateKnowledgeTag(ctx context.Context, in *CreateKnowledgeTagReq, opts ...grpc.CallOption) (*CreateKnowledgeTagResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKnowledgeTagResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseTagService_CreateKnowledgeTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseTagServiceClient) UpdateKnowledgeTag(ctx context.Context, in *UpdateKnowledgeTagReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseTagService_UpdateKnowledgeTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseTagServiceClient) DeleteKnowledgeTag(ctx context.Context, in *DeleteKnowledgeTagReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseTagService_DeleteKnowledgeTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseTagServiceClient) BindKnowledgeTag(ctx context.Context, in *BindKnowledgeTagReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KnowledgeBaseTagService_BindKnowledgeTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeBaseTagServiceServer is the server API for KnowledgeBaseTagService service.
// All implementations must embed UnimplementedKnowledgeBaseTagServiceServer
// for forward compatibility.
type KnowledgeBaseTagServiceServer interface {
	// 获取知识库标签列表
	SelectKnowledgeTagList(context.Context, *KnowledgeTagSelectReq) (*KnowledgeTagSelectListResp, error)
	// 新增知识库标签
	CreateKnowledgeTag(context.Context, *CreateKnowledgeTagReq) (*CreateKnowledgeTagResp, error)
	// 修改知识库标签
	UpdateKnowledgeTag(context.Context, *UpdateKnowledgeTagReq) (*emptypb.Empty, error)
	// 删除知识库标签
	DeleteKnowledgeTag(context.Context, *DeleteKnowledgeTagReq) (*emptypb.Empty, error)
	// 修改知识库标签
	BindKnowledgeTag(context.Context, *BindKnowledgeTagReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedKnowledgeBaseTagServiceServer()
}

// UnimplementedKnowledgeBaseTagServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKnowledgeBaseTagServiceServer struct{}

func (UnimplementedKnowledgeBaseTagServiceServer) SelectKnowledgeTagList(context.Context, *KnowledgeTagSelectReq) (*KnowledgeTagSelectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectKnowledgeTagList not implemented")
}
func (UnimplementedKnowledgeBaseTagServiceServer) CreateKnowledgeTag(context.Context, *CreateKnowledgeTagReq) (*CreateKnowledgeTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgeTag not implemented")
}
func (UnimplementedKnowledgeBaseTagServiceServer) UpdateKnowledgeTag(context.Context, *UpdateKnowledgeTagReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledgeTag not implemented")
}
func (UnimplementedKnowledgeBaseTagServiceServer) DeleteKnowledgeTag(context.Context, *DeleteKnowledgeTagReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKnowledgeTag not implemented")
}
func (UnimplementedKnowledgeBaseTagServiceServer) BindKnowledgeTag(context.Context, *BindKnowledgeTagReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindKnowledgeTag not implemented")
}
func (UnimplementedKnowledgeBaseTagServiceServer) mustEmbedUnimplementedKnowledgeBaseTagServiceServer() {
}
func (UnimplementedKnowledgeBaseTagServiceServer) testEmbeddedByValue() {}

// UnsafeKnowledgeBaseTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnowledgeBaseTagServiceServer will
// result in compilation errors.
type UnsafeKnowledgeBaseTagServiceServer interface {
	mustEmbedUnimplementedKnowledgeBaseTagServiceServer()
}

func RegisterKnowledgeBaseTagServiceServer(s grpc.ServiceRegistrar, srv KnowledgeBaseTagServiceServer) {
	// If the following call pancis, it indicates UnimplementedKnowledgeBaseTagServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KnowledgeBaseTagService_ServiceDesc, srv)
}

func _KnowledgeBaseTagService_SelectKnowledgeTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeTagSelectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseTagServiceServer).SelectKnowledgeTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseTagService_SelectKnowledgeTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseTagServiceServer).SelectKnowledgeTagList(ctx, req.(*KnowledgeTagSelectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseTagService_CreateKnowledgeTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgeTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseTagServiceServer).CreateKnowledgeTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseTagService_CreateKnowledgeTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseTagServiceServer).CreateKnowledgeTag(ctx, req.(*CreateKnowledgeTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseTagService_UpdateKnowledgeTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKnowledgeTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseTagServiceServer).UpdateKnowledgeTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseTagService_UpdateKnowledgeTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseTagServiceServer).UpdateKnowledgeTag(ctx, req.(*UpdateKnowledgeTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseTagService_DeleteKnowledgeTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKnowledgeTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseTagServiceServer).DeleteKnowledgeTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseTagService_DeleteKnowledgeTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseTagServiceServer).DeleteKnowledgeTag(ctx, req.(*DeleteKnowledgeTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseTagService_BindKnowledgeTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindKnowledgeTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseTagServiceServer).BindKnowledgeTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseTagService_BindKnowledgeTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseTagServiceServer).BindKnowledgeTag(ctx, req.(*BindKnowledgeTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

// KnowledgeBaseTagService_ServiceDesc is the grpc.ServiceDesc for KnowledgeBaseTagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KnowledgeBaseTagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knowledgebase_tag_service.KnowledgeBaseTagService",
	HandlerType: (*KnowledgeBaseTagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectKnowledgeTagList",
			Handler:    _KnowledgeBaseTagService_SelectKnowledgeTagList_Handler,
		},
		{
			MethodName: "CreateKnowledgeTag",
			Handler:    _KnowledgeBaseTagService_CreateKnowledgeTag_Handler,
		},
		{
			MethodName: "UpdateKnowledgeTag",
			Handler:    _KnowledgeBaseTagService_UpdateKnowledgeTag_Handler,
		},
		{
			MethodName: "DeleteKnowledgeTag",
			Handler:    _KnowledgeBaseTagService_DeleteKnowledgeTag_Handler,
		},
		{
			MethodName: "BindKnowledgeTag",
			Handler:    _KnowledgeBaseTagService_BindKnowledgeTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/knowledgebase-tag-service/knowledgebase-tag-service.proto",
}
