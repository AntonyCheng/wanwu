// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/perm-service/perm-service.proto

package perm_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PermService_CheckUserEnable_FullMethodName = "/perm_service.PermService/CheckUserEnable"
	PermService_CheckUserPerm_FullMethodName   = "/perm_service.PermService/CheckUserPerm"
)

// PermServiceClient is the client API for PermService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermServiceClient interface {
	// 检查用户状态
	CheckUserEnable(ctx context.Context, in *CheckUserEnableReq, opts ...grpc.CallOption) (*CheckUserEnableResp, error)
	// 检查用户权限
	CheckUserPerm(ctx context.Context, in *CheckUserPermReq, opts ...grpc.CallOption) (*CheckUserPermResp, error)
}

type permServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermServiceClient(cc grpc.ClientConnInterface) PermServiceClient {
	return &permServiceClient{cc}
}

func (c *permServiceClient) CheckUserEnable(ctx context.Context, in *CheckUserEnableReq, opts ...grpc.CallOption) (*CheckUserEnableResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserEnableResp)
	err := c.cc.Invoke(ctx, PermService_CheckUserEnable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permServiceClient) CheckUserPerm(ctx context.Context, in *CheckUserPermReq, opts ...grpc.CallOption) (*CheckUserPermResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserPermResp)
	err := c.cc.Invoke(ctx, PermService_CheckUserPerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermServiceServer is the server API for PermService service.
// All implementations must embed UnimplementedPermServiceServer
// for forward compatibility.
type PermServiceServer interface {
	// 检查用户状态
	CheckUserEnable(context.Context, *CheckUserEnableReq) (*CheckUserEnableResp, error)
	// 检查用户权限
	CheckUserPerm(context.Context, *CheckUserPermReq) (*CheckUserPermResp, error)
	mustEmbedUnimplementedPermServiceServer()
}

// UnimplementedPermServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPermServiceServer struct{}

func (UnimplementedPermServiceServer) CheckUserEnable(context.Context, *CheckUserEnableReq) (*CheckUserEnableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserEnable not implemented")
}
func (UnimplementedPermServiceServer) CheckUserPerm(context.Context, *CheckUserPermReq) (*CheckUserPermResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserPerm not implemented")
}
func (UnimplementedPermServiceServer) mustEmbedUnimplementedPermServiceServer() {}
func (UnimplementedPermServiceServer) testEmbeddedByValue()                     {}

// UnsafePermServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermServiceServer will
// result in compilation errors.
type UnsafePermServiceServer interface {
	mustEmbedUnimplementedPermServiceServer()
}

func RegisterPermServiceServer(s grpc.ServiceRegistrar, srv PermServiceServer) {
	// If the following call pancis, it indicates UnimplementedPermServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PermService_ServiceDesc, srv)
}

func _PermService_CheckUserEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserEnableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).CheckUserEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermService_CheckUserEnable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).CheckUserEnable(ctx, req.(*CheckUserEnableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermService_CheckUserPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserPermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).CheckUserPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermService_CheckUserPerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).CheckUserPerm(ctx, req.(*CheckUserPermReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PermService_ServiceDesc is the grpc.ServiceDesc for PermService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "perm_service.PermService",
	HandlerType: (*PermServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserEnable",
			Handler:    _PermService_CheckUserEnable_Handler,
		},
		{
			MethodName: "CheckUserPerm",
			Handler:    _PermService_CheckUserPerm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/perm-service/perm-service.proto",
}
